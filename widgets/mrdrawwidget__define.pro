; docformat = 'rst'
;
; NAME:
;       MrDrawWidget__Define
;
;*****************************************************************************************
;   Copyright (c) 2014, University of New Hampshire                                      ;
;   All rights reserved.                                                                 ;
;                                                                                        ;
;   Redistribution and use in source and binary forms, with or without modification,     ;
;   are permitted provided that the following conditions are met:                        ;
;                                                                                        ;
;       * Redistributions of source code must retain the above copyright notice,         ;
;         this list of conditions and the following disclaimer.                          ;
;       * Redistributions in binary form must reproduce the above copyright notice,      ;
;         this list of conditions and the following disclaimer in the documentation      ;
;         and/or other materials provided with the distribution.                         ;
;       * Neither the name of the University of New Hampshire nor the names of its       ;
;         contributors may be used to endorse or promote products derived from this      ;
;         software without specific prior written permission.                            ;
;                                                                                        ;
;   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY  ;
;   EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES ;
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT  ;
;   SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,       ;
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED ;
;   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR   ;
;   BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN     ;
;   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN   ;
;   ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH  ;
;   DAMAGE.                                                                              ;
;*****************************************************************************************
;
; PURPOSE
;+
;   The purpose of this class is to provide an object wrapper for the Draw_Widget
;   function. It is modelled off of IDL's Draw_Window function.
;
;   EVENT PROCESSING:
;       Events are first sent to MrGraphicsEventAdapter (or a subclass of it). If that
;       returns 1 (one -- the default), then even processing proceeds to the user-defined
;       callback function. If that also returns 1 (one), then the defualt callback routine
;       is called.
;
; :Author:
;   Matthew Argall::
;       University of New Hampshire
;       Morse Hall, Room 113
;       8 College Rd.
;       Durham, NH, 03824
;       matthew.argall@wildcats.unh.edu
;
; :History:
;	Modification History::
;       2014/03/17  -   Written by Matthew Argall
;-
;*****************************************************************************************
;+
;   Event handler for Drag events. Forwards event handling to the proper method
;   or procedure.
;
; :Private:
;
; :Params:
;       EVENT:              in, optional, type=structure
;                           An event structure returned by the windows manager.
;-
pro MrDrawWidget_Drag_Notify, destination, source, x, y, modifiers, default
   compile_opt strictarr
    
    ;Error handling
    catch, the_error
    if the_error ne 0 then begin
        catch, /cancel
        void = cgErrorMsg()
        return
    endif
    
    ;Type of event that was generated.
    event_name = size(event, /SNAME)
    widget_control, event.id, GET_UVALUE=oRef
    oRef -> GetProperty, DRAG_NOTIFY_EVENT_HANDLER=drag_notify_eh
    
    ;Forward the event.
    case size(drag_notify_eh, /TNAME) of
        'STRUCT': Call_Method, drag_notify_eh.method, drag_notify_eh.object, destination, source, x, y, modifiers, default
        'STRING': Call_Procedure, drag_notify_eh.method, drag_notify_eh.object, destination, source, x, y, modifiers, default
    endcase
end


;+
;   General event handler for the MrDrawWidget widget class. Its purpose is to forward
;   the different events generated by the XManager to their respective event handling
;   methods, procedures, and functions.
;
; :Private:
;
; :Params:
;       EVENT:              in, optional, type=structure
;                           An event structure returned by the windows manager.
;-
pro MrDrawWidget_Event_Pro, event
   compile_opt strictarr
    
    ;Error handling
    catch, the_error
    if the_error ne 0 then begin
        catch, /cancel
        void = cgErrorMsg()
        return
    endif
    
    ;Type of event that was generated.
    event_name = size(event, /SNAME)
    widget_control, event.id, GET_UVALUE=oRef
    
    ;Flag for calling the superclass
    tf_super = 0B

;---------------------------------------------------------------------
; Forward All Events? ////////////////////////////////////////////////
;---------------------------------------------------------------------
    ;If an event handler was provided, forward the events then return.
    ORef -> GetProperty, DRAW_HANDLER=draw_handler
    case size(draw_handler, /TNAME) of
        'OBJREF': begin
            if obj_valid(draw_handler) then begin
                Call_Method, draw_handler.method, draw_handler.object, event
                return
            endif
        endcase
        
        'STRING': begin
            if draw_handler ne '' then begin
                Call_Procedure, draw_handler, event
                return
            endif
        endcase
    endcase
    
;---------------------------------------------------------------------
; Drop Event /////////////////////////////////////////////////////////
;---------------------------------------------------------------------
    if size(event, /SNAME) eq 'WIDGET_DROP' then begin
        oRef -> GetProperty, DROP_HANDLER=drop_eh
        case size(drop_eh, /TNAME) of
            'OBJREF': Call_Method, drop_eh.method, viewport_en.object, event
            'STRING': if drop_eh ne '' then Call_Procedure, drop_eh, event
        endcase
        
        return
    endif
    
;---------------------------------------------------------------------
; Callback Pro/Method ////////////////////////////////////////////////
;---------------------------------------------------------------------
    ;Types of events
    event_type = ['MOUSE_DOWN', 'MOUSE_UP', 'MOUSE_MOTION', 'VIEWPORT_MOVE', 'EXPOSE', $
                  'KBRD_ASCII', 'KBRD', 'MOUSE_WHEEL']
    
    ;---------------------------------------------------------------------
    ; Object for Draw Event Callback? ////////////////////////////////////
    ;---------------------------------------------------------------------
    self -> GetProperty, EVENT_HANDLER=oEH, MOUSE_DOWN_HANDLER=mDownH, $
                         MOUSE_UP_HANDLER=mUpH, MOUSE_MOTION_HANDLER=mMotionH, $
                         KEYBOARD_HANDLER=keyH, SELECTION_CHANGE_HANDLER=selectH, $
                         MOUSE_WHEEL_HANDLER=mWheelH
                         
    case event_type[event.type] of
        'MOUSE_DOWN': begin
            result = oEH -> MouseDown(self, event.x, event.y, event.button, event.modifiers, event.clicks)
            if result && mouse_down_h ne '' $
                then result = Call_Function(mDownH, self, event.x, event.y, event.button, event.modifiers, event.clicks)
        endcase
        
        'MOUSE_UP': begin
            result = oEH -> MouseUp(self, event.x, event.y, event.button)
            if result && mouse_down_h ne '' $
                then result = Call_Function(mUpH, self, event.x, event.y, event.button)
        endcase
        
        'MOUSE_MOTION': begin
            result = oEH -> MouseMotion(self, event.x, event.y, event.modifiers)
            if result && mMotionH ne '' $
                then result = Call_Function(mMotionH, self, event.x, event.y, event.modifiers)
        endcase
        
        'MOUSE_WHEEL': begin
            result = oEH -> MouseWheel(self, event.x, event.y, event.clicks, event.modifiers)
            if result && mWheelH ne '' $
                then result = Call_Function(mWheelH, event.x, event.y, event.clicks, event.modifiers)
        endcase
        
        'KBRD_ASCII': begin
            result = oEH -> KeyHandler(self, 1, event.ch, event.key, event.x, event.y, event.press, event.release, event.modifiers)
            if result && keyH ne '' $
                then result = Call_Function(keyH, self, 1, event.ch, event.key, event.x, event.y, event.press, event.release, event.modifiers)
        endcase
        
        'KBRD': begin
            result = oEH -> KeyHandler(self, 0, event.ch, event.key, event.x, event.y, event.press, event.release, event.modifiers)
            if result && keyH ne '' $
                then result = Call_Function(keyH, self, 1, event.ch, event.key, event.x, event.y, event.press, event.release, event.modifiers)
        endcase
        
    ;---------------------------------------------------------------------
    ; More Pro/Method Callback ///////////////////////////////////////////
    ;---------------------------------------------------------------------
        'VIEWPORT_MOVE': begin
            oRef -> GetProperty, VIEWPORT_HANDLER=viewport_en
            case size(viewport_en, /TNAME) of
                'OBJREF': Call_Method, viewport_en.method, viewport_en.object, event
                'STRING': if viewport_en ne '' then Call_Procedure, viewport_en, event
            endcase
        endcase
        
        'EXPOSE': begin
            oRef -> GetProperty, EXPOSE_HANDLER=expose_eh
            case size(expose_eh, /TNAME) of
                'OBJREF': Call_Method, expose_eh.method, expose_eh.object, event
                'STRING': if expose_eh ne '' then Call_Procedure, expose_eh, event
            endcase
        endcase
        
        ;If we get here, there were no matches. Call the supercalss
        else: tf_super = 1B
    endcase
    
    ;Just in case, send the event to MrWidgetAtom as well
    if tf_super then self -> MrWidgetAtom::Event_Pro, event
end


;+
;   Event handling function for Event_Func.
;
; :Private:
;
; :Params:
;       EVENT:              in, optional, type=structure
;                           An event structure returned by the windows manager.
;-
function MrDrawWidget_Event_Func, event
   compile_opt strictarr
    
    ;Error handling
    catch, the_error
    if the_error ne 0 then begin
        catch, /cancel
        void = cgErrorMsg()
        return, 0
    endif
    
    ;Type of event that was generated.
    event_name = size(event, /SNAME)
    widget_control, event.top, GET_UVALUE=oRef
    
;---------------------------------------------------------------------
;Callback Object /////////////////////////////////////////////////////
;---------------------------------------------------------------------
    ;If another object is handling events, forward the event and exit.
    oRef -> GetProperty, EVENT_HANDLER=event_handler, DRAW_EVENT_HANDLER=draw_event_handler
    if obj_valid(event_handler) then begin
        result = Call_Method(event_handler.method, event_handler.object, event)
        return, result
    endif
    
;---------------------------------------------------------------------
;Callback Func/Method ////////////////////////////////////////////////
;---------------------------------------------------------------------
    
    ;Types of events
    event_type = ['MOUSE_DOWN', 'MOUSE_UP', 'MOUSE_MOTION', 'VIEWPORT_MOVE', 'EXPOSE', $
                  'KBRD_ASCII', 'KBRD', 'MOUSE_WHEEL']
    
    ;---------------------------------------------------------------------
    ;Object for Draw Event Callback? /////////////////////////////////////
    ;---------------------------------------------------------------------
    if obj_valid(self.draw_event_handler) then begin
        case event_type[event.type] of
            'MOUSE_DOWN':   self.draw_event_handler -> MouseDown,   self, event.x, event.y, event.button, event.modifiers, event.clicks
            'MOUSE_UP':     self.draw_event_handler -> MouseUp,     self, event.x, event.y, event.button
            'MOUSE_MOTION': self.draw_event_handler -> MouseMotion, self, event.x, event.y, event.modifiers
            'MOUSE_WHEEL':  self.draw_event_handler -> MouseWheel,  self, event.x, event.y, event.clicks, event.modifiers
            'KBRD_ASKII':   self.draw_event_handler -> KeyHandler,  self, 1, event.ch, event.key, event.x, event.y, event.press, event.release, event.modifiers
            'KBRD':         self.draw_event_handler -> KeyHandler,  self, 0, event.ch, event.key, event.x, event.y, event.press, event.release, event.modifiers
            else: ;Do nothing
        endcase
        
    ;---------------------------------------------------------------------
    ;Pro/Method Callback? ////////////////////////////////////////////////
    ;---------------------------------------------------------------------
    endif else begin
        case event_type[event.type] of
            'MOUSE_DOWN': begin
                oTLB -> GetProperty, BUTTON_EVENT_HANDLER=button_eh
                case size(button_eh, /TNAME) of
                    'OBJREF': result = Call_Method(button_eh.method, button_eh.object, event)
                    'STRING': if button_eh ne '' then result = Call_Function(button_eh, event)
                endcase
            endcase
        
            'MOUSE_UP': begin
                oTLB -> GetProperty, BUTTON_EVENT_HANDLER=button_eh
                case size(button_eh, /TNAME) of
                    'OBJREF': result = Call_Method(button_eh.method, button_eh.object, event)
                    'STRING': if button_eh ne '' then result = Call_Function(button_eh, event)
                endcase
            endcase
        
            'MOUSE_MOTION': begin
                oTLB -> GetProperty, MOTION_EVENT_HANDLER=motion_eh
                case size(motion_eh, /TNAME) of
                    'OBJREF': result = Call_Method(motion_eh.method, motion_eh.object, event)
                    'STRING': if motion_eh ne '' then result = Call_Function(motion_eh, event)
                endcase
            endcase
        
            'MOUSE_WHEEL': begin
                oTLB -> GetProperty, WHEEL_EVENT_HANDLER=wheel_events
                case size(wheel_events, /TNAME) of
                    'OBJREF': result = Call_Method(wheel_events.method, wheel_events.object, event)
                    'STRING': if wheel_events ne '' then result = Call_Function(wheel_events, event)
                endcase
            endcase
        
            'KBRD_ASCII': begin
                oTLB -> GetProperty, KEYBOARD_EVENT_HANDLER=keyboard_eh
                case size(keyboard_eh, /TNAME) of
                    'OBJREF': result = Call_Method(keyboard_eh.method, keyboard_eh.object, event)
                    'STRING': if keyboard_eh ne '' then result = Call_Function(keyboard_eh, event)
                endcase
            endcase
        
            'KBRD': begin
                oTLB -> GetProperty, KEYBOARD_EVENT_HANDLER=keyboard_eh
                case size(keyboard_eh, /TNAME) of
                    'OBJREF': result = Call_Method(keyboard_eh.method, keyboard_eh.object, event)
                    'STRING': if keyboard_eh ne '' then result = Call_Function(keyboard_eh, event)
                endcase
            endcase
            
            else: ;Do nothing
        endcase
    endelse
        
;---------------------------------------------------------------------
;More Pro/Method Callback ////////////////////////////////////////////
;---------------------------------------------------------------------
    case event_type[event.type] of
        
        'VIEWPORT_MOVE': begin
            oTLB -> GetProperty, VIEWPORT_EVENT_HANDLER=viewport_eh
            case size(viewport_eh, /TNAME) of
                'OBJREF': result = Call_Method(viewport_eh.method, viewport_eh.object, event)
                'STRING': if viewport_eh ne '' then result = Call_Function(viewport_eh, event)
            endcase
        endcase
        
        'EXPOSE': begin
            oTLB -> GetProperty, EXPOSE_EVENT_HANDLER=expose_eh
            case size(expose_eh, /TNAME) of
                'OBJREF': result = Call_Method(expose_eh.method, expose_eh.object, event)
                'STRING': if expose_eh ne '' then result = Call_Function(expose_eh, event)
            endcase
        endcase
        
        else: ;Do nothing
    endcase
    
    ;If no result yet, check MrWidgetAtom
    if n_elements(result) eq 0 then result = self -> MrWidgetAtom::Event_Func(event)
    
    return, result
end


;+
;   Event handling method for Drag_Notify events.
;
; :Private:
;
; :Params:
;       EVENT:              in, optional, type=structure
;                           An event structure returned by the windows manager.
;-
pro MrDrawWidget::Drag_Notify, event
    ;Nothing to do yet.
end


;+
;   This method draws the contents of the draw widget object's container in the draw
;   widget window. It does this by calling the DRAW methods of any objects found in its
;   container object.
;
; :Keywords:
;       BACKGROUND_COLOR:   in, optional, type=string, default='White'
;                           Set this keyword to the name of the background color. Used
;                               only when erasing window contents. On 8-bit displays, this
;                               will load a color in !P.BACKGROUND.
;       NOERASE:            in, optional, type=boolean, default=1
;                           Set this keyword to prevent the window from being erasee
;                               before drawing contents.
;       HOURGLASS:          in, optional, type=boolean, default=0
;                           If set, the cursor will change to an hourglass during the
;                               draw operation.
;       REQUESTER:          in, optional, type=object
;                           The object that requests a DRAW of the
;                               DrawWidget. This is helpful sometimes when DRAWWIDGET_DRAW messages
;                               are received by other objects. The object reference is passed on as
;                               the DATA in the DRAWWIDGET_DRAW message.
;       TARGET_WINDOW:      in, optional, type=integer
;                           Normally the draw widget draws into its own window. But,
;                               sometimes you want the draw widget to draw somewhere else.
;                               Setting this keyword to another DRAWWIDGET or PIXMAPWIDGET
;                               object reference allows graphics to be drawn there.
;       TARGETS:            in, optional, type=object/objarr
;                           Typically, calling the DRAW method of a DrawWidget will call
;                               the DRAW method of any objects in its container. However, if
;                               the TARGETS keyword is set to an object reference (or array of
;                               object references), only these objects will be drawn. This
;                               would allow you, for example, to re-draw only a single image
;                               object in a window with several image objects.
;       _EXTRA:             in, optional, type=any
;                           Any extra keywords appropriate for superclass DRAW methods.
;-
PRO MrDrawWidget::Draw, $
 BACKGROUND_COLOR=background_color, $
 NOERASE=noerase, $
 HOURGLASS=hourglass, $
 REQUESTER=requester, $
 TARGET_WINDOW=target_window, $
 TARGETS=targets, $
_EXTRA=extraKeywords
   compile_opt strictarr
    
    ;Error handling
    catch, the_error
    if the_error ne 0 then begin
        catch, /cancel
        void = cgErrorMsg()
        return
    endif

    ;Do not draw anything?
    if self._refresh eq 0 then return

    ;Make sure the window is valid
    if (WindowAvailable(self._winID) eq 0) then $
        message, 'Draw widget does not have a valid window id. Try realizing it.'

    ;Defaults
    noerase      = keyword_set(noerase)
    hourglass    = keyword_set(hourglass)
    erase_window = keyword_set(erase_window)
    if n_elements(background_color) eq 0 then background_color = self._background

    ;Enable the hourglass mouse cursor, if needed.
    if hourglass then widget_control, /HOURGLASS

    ;If the device supports windows, switch to the draw window.
    if (!d.flags and 256) ne 0 then begin
        wset, self._winid
        if ~noerase or ~self._noerase then self -> Erase, background_color
    endif
   
    ;Get all objects from the container
    allObj = self -> Get(/ALL, COUNT=nObj)
    
    ;Draw all of the objects.
    for i = 0, nObj - 1 do allObj[i] -> Draw
end


;+
;   Event handling method for Drop events.
;
; :Private:
;
; :Params:
;       EVENT:              in, optional, type=structure
;                           An event structure returned by the windows manager.
;-
pro MrDrawWidget::Drop_Events, event
    ;Nothing to do yet.
end


;+
;   Event handling method for Expose events.
;
; :Private:
;
; :Params:
;       EVENT:              in, optional, type=structure
;                           An event structure returned by the windows manager.
;-
pro MrDrawWidget::Expose_Events, event
    ;Nothing to do yet.
end


;+
;   The purpose of this method is to create a resizable base in which to place the
;   draw widget.
;
; :Private:
;
; :Keywords:
;       WINDOW_TITLE:       in, optional, type=string, default='MrDrawWidget'
;                           Name to be placed on the window's title bar.
;-
pro MrDrawWidget::BuildWindow, $
WINDOW_TITLE=window_title
   compile_opt strictarr
    
    ;Error handling
    catch, the_error
    if the_error ne 0 then begin
        catch, /cancel
        void = cgErrorMsg()
        return
    endif

    ;Defaults
    if n_elements(window_title) eq 0 then window_title = 'MrDrawWidget'

    ;Create a resizeable, top level base for the window    
    self._oTLB = obj_new('MrTopLevelBase', TITLE=window_title, $
                         TLB_SIZE_HANDLER={object: self, method: 'TLB_Resize_Events'}, $
                         /TLB_SIZE_EVENTS)
end


;+
;   The purpose of this method is to erase the draw window.
;-
pro MrDrawWidget::Erase
   compile_opt strictarr
    
    ;Error handling
    catch, the_error
    if the_error ne 0 then begin
        catch, /cancel
        void = cgErrorMsg()
        return
    endif
    
    ;Default background color
    if n_elements(color) eq 0 then color = self._background
    
    ;Erase the window.
    if (!d.flags and 256) ne 0 then wset, self._winID
    cgErase, color=cgcolor(self_background)
end


;+
;   Event handling method for Notify_Realize
;
; :Private:
;
; :Params:
;       EVENT:              in, optional, type=structure
;                           An event structure returned by the windows manager.
;-
pro MrDrawWidget::Notify_Realize, id
   compile_opt strictarr
    
    ;Error handling
    catch, the_error
    if the_error ne 0 then begin
        catch, /cancel
        void = cgErrorMsg()
        return
    endif
    
    ;Get the window ID of the draw widget
    widget_control, id, GET_VALUE=winID
    self._winID = winID

    ;Set the name of the window to include with window number.
    widget_control, id, TLB_SET_TITLE='MrDrawWidget (' + strtrim(winID,2) + ')'
    
    ;Draw as soon as the window is visible
    self -> Draw
end


;+
;   This method resizes the canvas area of the draw widget.
;
; :Private:
;
; :Params:
;       XSIZE:      in, required, type=integer
;                   The new X size of the canvas area of the draw widget, in pixels.
;       YSIZE:      in, required, type=integer
;                   The new Y size of the canvas area of the draw widget, in pixels.
;
; :Keywords:
;       DRAW:       in, optional, type=boolean, default=1
;                   Set this keyword to call the draw method when the draw widget
;                       resizing is completed.
;       SCREEN:     in, optional, type=boolean, default=0
;                   Normally, the XSIZE and YSIZE keywords apply to the draw widget canvas.
;                       If the SCREEN keyword is set, the keywords apply to the screen
;                       coordinates of the draw widget. (It's actual size on the display.
;                       Usually about 6 pixels larger than the canvas.)
;       VIEWPORT:   in, optional, type=boolean, default=0
;                   Normally, the XSIZE and YSIZE keywords apply to the draw widget canvas.
;                       If the VIEWPORT keyword is set, the keywords apply to the viewport
;                       size of the draw widget.
;       _EXTRA:     in, optional, type=any
;                   Any extra keywords appropriate for the DRAW method.
;-
PRO MrDrawWidget::Resize, xsize, ysize, $
 DRAW=draw, $
 SCREEN=screen, $
 VIEWPORT=viewport, $
_EXTRA=extraKeywords
   compile_opt strictarr
    
    ;Error handling
    catch, the_error
        if the_error ne 0 then begin
        catch, /cancel
        void = cgErrorMsg()
        return
    endif

    IF N_Elements(xsize) EQ 0 THEN Message, "XSIZE parameter is missing."
    IF N_Elements(ysize) EQ 0 THEN Message, "YSIZE parameter is missing."

    CASE 1 OF
        KEYWORD_SET(screen):   Widget_Control, self._id, Scr_XSize=xsize, Scr_YSize=ysize
        KEYWORD_SET(viewport): Widget_Control, self._id, XSize=xsize, YSize=ysize
        ELSE:                  Widget_Control, self._id, Draw_XSize=xsize, Draw_YSize=ysize
    ENDCASE

    IF Keyword_Set(draw) THEN self -> Draw, _Extra=extraKeywords
END


;+
;   The purpose of this method it enable or diable refreshing of the display.
;
; :Keywords:
;       DISABLE:            in, optional, type=boolean, default=0
;                           If set, refreshing of the draw window will be disabled.
;-
pro MrDrawWidget::Refresh, $
DISABLE=disable
    compile_opt strictarr
    
    ;Error handling
    catch, the_error
    if the_error ne 0 then begin
        catch, /cancel
        void = cgErrorMsg()
        return
    endif
    
    ;Enable or disable.
    self._refresh = ~keyword_set(disable)
    
    ;Re-draw the window contents.
    if self._refresh then self -> Draw
end


;+
;   Event handling method for TLB_Size_Events. This method is only called if PARENT was
;   not provided when the draw widget was made.
;
; :Private:
;
; :Params:
;       EVENT:              in, optional, type=structure
;                           An event structure returned by the windows manager.
;-
pro MrDrawWidget::TLB_Resize_Events, event
    compile_opt strictarr
    
    ;Error handling
    catch, the_error
    if the_error ne 0 then begin
        catch, /cancel
        void = cgErrorMsg()
        return
    endif

    ;Subtract the height of the menu and status bars from the size of the top level base
    xNew = event.x
    yNew = event.y
    
    ;Set the new size of the draw widget
    self -> Resize, xNew, yNew
;    self.xsize = xNew
;    self.ysize = yNew

    ;Draw the plot to the new size
    self -> Draw
end


;+
;   Get class properties
;
; :Keywords;
;   BACKGROUND_COLOR:   out, optional, type=string
;                       The name of the initial color for the draw widget. Used when
;                           realized and if the draw widget is set up to erase before
;                           display (i.e., NOERASE=0).
;       BUTTON_EVENTS:  out, optional, type=boolean
;                       If set, button events will be enabled.
;       CONTEXT_EVENTS: out, optional, type=boolean
;                       If set, context events will be enabled.
;       DRAG_NOTIFY:    out, optional, type=string/structure
;                       If a string, the name of a procedure to be called when items are
;                           dragged over the window. If a structure, it defines the object
;                           and its procedure method that will handle the event.
;       DRAW_HANDLER:   out, optional, type=string/structure
;                       If a string is provided, it is the name of a procedure
;                           to be called when events are generated. If a structure
;                           is provided, its only fields must be "object" and "method",
;                           describing the procedure method to be used as an event
;                           handler::
;                               {object: oRef, $
;                               method: 'callback_method'}
;                           For function event handling, set the `FUNCTION_CALLBACK`
;                           keyword. If set, all of the *_HANDLER keywords will be
;                           ignored.
;       DROP_EVENTS:    out, optional, type=boolean
;                       If set, drop events will be enabled.
;       DROP_HANDLER:   out, optional, type=string/structure
;                       Either the name of the procedure or a structure defining an object
;                           method to be called when drop events are generated.
;       EVENT_HANDLER:  out, optional, type=object
;                       The object used when events are generated. It object must be
;                           a subclass of `MrGraphicsEventAdapter`.
;       EXPOSE_EVENTS:  out, optional, type=boolean
;                       If set, expose events will be enabled.
;       EXPOSE_HANDLER: out, optional, type=string/structure
;                       Either the name of the procedure or a structure defining an object
;                           method to be called when expose events are generated.
; IGNORE_ACCELERATORS:  out, optional, type=boolean/string/strarr
;                       Set this keyword to specify what WIDGET_BUTTON accelerators are
;                           to be ignored when this draw widget has keyboard focus.
;                           Setting IGNORE_ACCELERATORS allows a defined list of
;                           accelerators to be processed by the draw widget instead
;                           of by the conflicting accelerated button. Valid values are::
;                             1             -- All accelerators should be ignored.
;                             string/strarr -- Any value that is legal for the
;                                              ACCELERATOR keyword for BUTTONWIDGET
;       INPUT_FOCUS:    out, optional, type=boolean
;                       If set, the draw widget will be given keyboard focus
;   KEYBOARD_EVENTS:    out, optional, type=boolean
;                       If set, keyboard events will be enabled.
;   KEYBOARD_HANDLER:   out, optional, type=string
;                       The name of a function to be called when keyboard events are
;                           generated. See `Widget_Window <http://exelisvis.com/docs/WIDGET_WINDOW.html>`
;                           for details. Also, the `DRAW_HANDLER` and `EVENT_HANDLER`
;                           keywords provide a simpler means of handling events.
;       MOTION_EVENTS:  out, optional, type=boolean
;                       If set, motion events will be enabled.
;   MOUSE_UP_HANDLER:   out, optional, type=string
;                       The name of a function to be called when button up events are
;                           generated. See `Widget_Window <http://exelisvis.com/docs/WIDGET_WINDOW.html>`
;                           for details. Also, the `DRAW_HANDLER` and `EVENT_HANDLER`
;                           keywords provide a simpler means of handling events.
;   MOUSE_DOWN_HANDLER: out, optional, type=string
;                       The name of a function to be called when button down events are
;                           generated. See `Widget_Window <http://exelisvis.com/docs/WIDGET_WINDOW.html>`
;                           for details. Also, the `DRAW_HANDLER` and `EVENT_HANDLER`
;                           keywords provide a simpler means of handling events.
; MOUSE_MOTION_HANDLER: out, optional, type=string
;                       The name of a function to be called when the mouse motion events are
;                           generated. See `Widget_Window <http://exelisvis.com/docs/WIDGET_WINDOW.html>`
;                           for details. Also, the `DRAW_HANDLER` and `EVENT_HANDLER`
;                           keywords provide a simpler means of handling events.
; MOUSE_WHEEL_HANDLER:  out, optional, type=string
;                       The name of a function to be called when mouse wheel events are
;                           generated. See `Widget_Window <http://exelisvis.com/docs/WIDGET_WINDOW.html>`
;                           for details. Also, the `DRAW_HANDLER` and `EVENT_HANDLER`
;                           keywords provide a simpler means of handling events.
;       NOERASE:        out, optional, type=boolean
;                       If set, the draw widget will not be erased before drawing.
;       SET_DRAW_VIEW:  out, optional, type=intarr(2)
;                       The [x,y] offset, in pixels of the viewport window from the
;                           bottom left corner of the display window.
;       TOOLTIP:        out, optional, type=string
;                       A string displayed when the mouse hovers over the draw window.
;   VIEWPORT_EVENTS:    out, optional, type=boolean
;                       If set, viewport scroll events will be enabled.
;   VIEWPORT_HANLER:    out, optional, type=string/structure
;                       Either the name of the procedure or a structure defining an object
;                           method to be called when viewport scroll events are generated.
;       XSIZE:          out, optional, type=integer
;                       Actual X-size of the dispaly window (pixels).
;       YSIZE:          out, optional, type=integer
;                       Actual Y-size of the dispaly window (pixels).
;       _REF_EXTRA:     out, optional, type=any
;                       Any keyword appropriate for the superclass INIT methods.
;-
PRO MrDrawWidget::GetProperty, $
 BACKGROUND_COLOR=background_color, $
 NOERASE=noerase, $
 
 ;Widget_Control Options
 IGNORE_ACCELERATORS=ignore_accelerators, $
 INPUT_FOCUS=input_focus, $
 SET_DRAW_VIEW=set_draw_view, $
 TOOLTIP=tooltip, $
 WINDOWID=windowID, $
 XSIZE=xsize, $
 YSIZE=ysize, $
 
 ;Events On or Off?
 BUTTON_EVENTS=button_events, $
 CONTEXT_EVENTS=context_events, $
 EXPOSE_EVENTS=expose_events, $
 KEYBOARD_EVENTS=keyboard_events, $
 MOTION_EVENTS=motion_events, $
 VIEWPORT_EVENTS=viewport_events, $
 WHEEL_EVENTS=wheel_events, $

 ;Method Event Handling
 CONTEXT_HANDLER=context_handler, $
 DRAG_NOTIFY=drag_notify, $
 DRAW_HANDLER=draw_handler, $
 DROP_HANDLER=drop_handler, $
 EVENT_HANDLER=event_handler, $
 EXPOSE_HANDLER=expose_handler, $
 KEYBOARD_HANDLER=keyboard_handler, $
 MOUSE_DOWN_HANDLER=mouse_down_handler, $
 MOUSE_UP_HANDLER=mouse_up_handler, $
 MOUSE_MOTION_HANDLER=mouses_motion_handler, $
 MOUSE_WHEEL_HANDLER=mouse_wheel_handler, $
 VIEWPORT_HANDLER=viewport_handler, $
_REF_EXTRA=extra
   compile_opt strictarr

    ;Error handling
    catch, the_error
    if the_error ne 0 then begin
        catch, /cancel
        void = cgErrorMsg()
        return
    endif

    if widget_info(self._id, /VALID_ID) eq 0 then return

    if arg_present(background_color) then background_color = self._background
    if arg_present(noerase)          then noerase          = self._noerase
    
    ;Widget_Control Options
    if arg_present(windowID)        then widget_control, self._id, GET_VALUE=windowID
    
    ;Events On or Off?
    if arg_present(button_events)   then button_events   = widget_info(self._id, /DRAW_BUTTON_EVENTS)
    if arg_present(context_events)  then context_events  = widget_info(self._id, /CONTEXT_EVENTS)
    if arg_present(expose_events)   then expose_events   = widget_info(self._id, /DRAW_EXPOSE_EVENTS)
    if arg_present(motion_events)   then motion_events   = widget_info(self._id, /DRAW_MOTION_EVENTS)
    if arg_present(viewport_events) then viewport_events = widget_info(self._id, /DRAW_VIEWPORT_EVENTS)
    if arg_present(keyboard_events) then keyboard_events = widget_info(self._id, /DRAW_KEYBOARD_EVENTS)
    if arg_present(tooltip)         then tooltip         = widget_info(self._id, /TOOLTIP)
    if arg_present(wheel_events)    then wheel_events    = widget_info(self._id, /DRAW_WHEEL_EVENTS)
   
    ;Method Event Handlers
    if arg_present(context_handler)      then context_handler      = *self._context_handler
    if arg_present(drag_notify)          then expose_handler       = *self._drag_notify
    if arg_present(draw_handler)         then expose_handler       = *self._draw_handler
    if arg_present(drop_handler)         then expose_handler       = *self._drop_handler
    if arg_present(event_handler)        then expose_handler       = *self._event_handler
    if arg_present(expose_handler)       then expose_handler       = *self._expose_handler
    if arg_present(keyboard_handler)     then keyboard_handler     = *self._keyboard_handler
    if arg_present(mouse_down_handler)   then mouse_down_handler   = *self._mouse_down_handler
    if arg_present(mouse_up_handler)     then mouse_up_handler     = *self._mouse_up_handler
    if arg_present(mouse_motion_handler) then mouse_motion_handler = *self._mouse_motion_handler
    if arg_present(mouse_wheel_handler)  then mouse_wheel_handler  = *self._mouse_wheel_handler
    if arg_present(viewport_handler)     then viewport_handler     = *self._viewport_handler

    ;Superclass Properties
    if n_elements(extra) gt 0 then self -> MrWidgetAtom::GetProperty, _STRICT_EXTRA=extra
end


;+
;   Set class properties
;
; :Keywords:
;   BACKGROUND_COLOR:   in, optional, type=string
;                       The name of the initial color for the draw widget. Used when
;                           realized and if the draw widget is set up to erase before
;                           display (i.e., NOERASE=0).
;       BUTTON_EVENTS:  in, optional, type=boolean
;                       If set, button events will be enabled.
;       CONTEXT_EVENTS: in, optional, type=boolean
;                       If set, context events will be enabled.
;       DRAG_NOTIFY:    in, optional, type=string/structure
;                       If a string, the name of a procedure to be called when items are
;                           dragged over the window. If a structure, it defines the object
;                           and its procedure method that will handle the event.
;       DRAW_HANDLER:   in, optional, type=string/structure
;                       If a string is provided, it is the name of a procedure
;                           to be called when events are generated. If a structure
;                           is provided, its only fields must be "object" and "method",
;                           describing the procedure method to be used as an event
;                           handler::
;                               {object: oRef, $
;                               method: 'callback_method'}
;                           For function event handling, set the `FUNCTION_CALLBACK`
;                           keyword. If set, all of the *_HANDLER keywords will be
;                           ignored.
;       DROP_EVENTS:    in, optional, type=boolean
;                       If set, drop events will be enabled.
;       DROP_HANDLER:   in, optional, type=string/structure
;                       Either the name of the procedure or a structure defining an object
;                           method to be called when drop events are generated.
;       EVENT_HANDLER:  in, optional, type=object
;                       The object used when events are generated. It object must be
;                           a subclass of `MrGraphicsEventAdapter`.
;       EXPOSE_EVENTS:  in, optional, type=boolean
;                       If set, expose events will be enabled.
;       EXPOSE_HANDLER: in, optional, type=string/structure
;                       Either the name of the procedure or a structure defining an object
;                           method to be called when expose events are generated.
; IGNORE_ACCELERATORS:  in, optional, type=boolean/string/strarr
;                       Set this keyword to specify what WIDGET_BUTTON accelerators are
;                           to be ignored when this draw widget has keyboard focus.
;                           Setting IGNORE_ACCELERATORS allows a defined list of
;                           accelerators to be processed by the draw widget instead
;                           of by the conflicting accelerated button. Valid values are::
;                             1             -- All accelerators should be ignored.
;                             string/strarr -- Any value that is legal for the
;                                              ACCELERATOR keyword for BUTTONWIDGET
;       INPUT_FOCUS:    in, optional, type=boolean
;                       If set, the draw widget will be given keyboard focus
;   KEYBOARD_EVENTS:    in, optional, type=boolean
;                       If set, keyboard events will be enabled.
;   KEYBOARD_HANDLER:   in, optional, type=string
;                       The name of a function to be called when keyboard events are
;                           generated. See `Widget_Window <http://exelisvis.com/docs/WIDGET_WINDOW.html>`
;                           for details. Also, the `DRAW_HANDLER` and `EVENT_HANDLER`
;                           keywords provide a simpler means of handling events.
;       MOTION_EVENTS:  in, optional, type=boolean
;                       If set, motion events will be enabled.
;   MOUSE_UP_HANDLER:   in, optional, type=string
;                       The name of a function to be called when button up events are
;                           generated. See `Widget_Window <http://exelisvis.com/docs/WIDGET_WINDOW.html>`
;                           for details. Also, the `DRAW_HANDLER` and `EVENT_HANDLER`
;                           keywords provide a simpler means of handling events.
;   MOUSE_DOWN_HANDLER: in, optional, type=string
;                       The name of a function to be called when button down events are
;                           generated. See `Widget_Window <http://exelisvis.com/docs/WIDGET_WINDOW.html>`
;                           for details. Also, the `DRAW_HANDLER` and `EVENT_HANDLER`
;                           keywords provide a simpler means of handling events.
; MOUSE_MOTION_HANDLER: in, optional, type=string
;                       The name of a function to be called when the mouse motion events are
;                           generated. See `Widget_Window <http://exelisvis.com/docs/WIDGET_WINDOW.html>`
;                           for details. Also, the `DRAW_HANDLER` and `EVENT_HANDLER`
;                           keywords provide a simpler means of handling events.
; MOUSE_WHEEL_HANDLER:  in, optional, type=string
;                       The name of a function to be called when mouse wheel events are
;                           generated. See `Widget_Window <http://exelisvis.com/docs/WIDGET_WINDOW.html>`
;                           for details. Also, the `DRAW_HANDLER` and `EVENT_HANDLER`
;                           keywords provide a simpler means of handling events.
;       NOERASE:        in, optional, type=boolean
;                       If set, the draw widget will not be erased before drawing.
;       SET_DRAW_VIEW:  in, optional, type=intarr(2)
;                       The [x,y] offset, in pixels of the viewport window from the
;                           bottom left corner of the display window.
;       TOOLTIP:        in, optional, type=string
;                       A string displayed when the mouse hovers over the draw window.
;   VIEWPORT_EVENTS:    in, optional, type=boolean
;                       If set, viewport scroll events will be enabled.
;   VIEWPORT_HANLER:    in, optional, type=string/structure
;                       Either the name of the procedure or a structure defining an object
;                           method to be called when viewport scroll events are generated.
;       _REF_EXTRA:     in, optional, type=any
;                       Any keyword appropriate for the superclass INIT methods.
;-
PRO MrDrawWidget::SetProperty, $
 BACKGROUND_COLOR=background_color, $
 NOERASE=noerase, $
 
 ;Widget_Control Options
 IGNORE_ACCELERATORS=ignore_accelerators, $
 INPUT_FOCUS=input_focus, $
 SET_DRAW_VIEW=set_draw_view, $
 TOOLTIP=tooltip, $
 
 ;Turn Events On or Off
 BUTTON_EVENTS=button_events, $
 CONTEXT_EVENTS=context_events, $
 EXPOSE_EVENTS=expose_events, $
 KEYBOARD_EVENTS=keyboard_events, $
 MOTION_EVENTS=motion_events, $
 VIEWPORT_EVENTS=viewport_events, $
 WHEEL_EVENTS=wheel_events, $

 ;Event Callback Function/Procedures/Methods
 CONTEXT_HANDLER=context_handler, $
 DRAG_NOTIFY=drag_notify, $
 DRAW_HANDLER=draw_handler, $
 DROP_HANDLER=drop_handler, $
 EVENT_HANDLER=event_handler, $
 EXPOSE_HANDLER=expose_handler, $
 KEYBOARD_HANDLER=keyboard_handler, $
 MOUSE_DOWN_HANDLER=mouse_down_handler, $
 MOUSE_UP_HANDLER=mouse_up_handler, $
 MOUSE_MOTION_HANDLER=mouses_motion_handler, $
 MOUSE_WHEEL_HANDLER=mouse_wheel_handler, $
 VIEWPORT_HANDLER=viewport_handler, $
_REF_EXTRA=extra
   compile_opt strictarr
    
    ;Error handling
    catch, the_error
    if the_error ne 0 then begin
        catch, /cancel
        void = cgErrorMsg()
        return
    endif

    ; Make sure you have a valid widget here.
    IF Widget_Info(self._id, /Valid_ID) NE 1 THEN RETURN
    
    ;Class properties
    IF N_ELEMENTS(noerase)          GT 0 THEN self._noerase    = Keyword_Set(erase_window)
    IF N_ELEMENTS(background_color) GT 0 THEN self._background = background

;---------------------------------------------------------------------
;Widget_Control Options //////////////////////////////////////////////
;---------------------------------------------------------------------
    IF N_ELEMENTS(ignore_accelerators) GT 0 THEN WIDGET_CONTROL, self._id, IGNORE_ACCELERATORS = Keyword_Set(ignore_accelerators)
    IF N_ELEMENTS(input_focus)         GT 0 THEN WIDGET_CONTROL, self._id, INPUT_FOCUS         = Keyword_Set(input_focus)
    IF N_ELEMENTS(set_draw_view)       GT 0 THEN WIDGET_CONTROL, self._id, SET_DRAW_VIEW       = set_draw_view
    IF N_ELEMENTS(tooltip)             NE 0 THEN Widget_Control, self._id, TOOLTIP             = tooltip

    ;Superclass
    if n_elements(extra) gt 0 then self -> MrWidgetAtom::SetProperty, _STRICT_EXTRA=extra

;---------------------------------------------------------------------
;Turn Events On or Off ///////////////////////////////////////////////
;---------------------------------------------------------------------
    IF N_ELEMENTS(button_events)   GT 0 THEN WIDGET_CONTROL, self._id, DRAW_BUTTON_EVENTS   = Keyword_Set(button_events)
    IF N_Elements(context_events)  GT 0 THEN WIDGET_CONTROL, self._id, CONTEXT_EVENTS       = Keyword_Set(context_events)
    IF N_ELEMENTS(expose_events)   GT 0 THEN WIDGET_CONTROL, self._id, DRAW_EXPOSE_EVENTS   = Keyword_Set(expose_events)
    IF N_ELEMENTS(keyboard_events) GT 0 THEN WIDGET_CONTROL, self._id, DRAW_KEYBOARD_EVENTS = Keyword_Set(keyboard_events)
    IF N_ELEMENTS(motion_events)   GT 0 THEN WIDGET_CONTROL, self._id, DRAW_MOTION_EVENTS   = Keyword_Set(motion_events)
    IF N_ELEMENTS(viewport_events) GT 0 THEN WIDGET_CONTROL, self._id, DRAW_VIEWPORT_EVENTS = Keyword_Set(viewport_events)
    IF N_ELEMENTS(wheel_events)    GT 0 THEN Widget_Control, self._ID, DRAW_WHEEL_EVENTS    = Keyword_Set(wheel_events)

;---------------------------------------------------------------------
;Callback Function/Procedures/Methods ////////////////////////////////
;---------------------------------------------------------------------
    ;DRAW_HANDLER
    if n_elements(draw_handler) gt 0 then begin
        case size(draw_handler, /TNAME) of
            'STRUCT': begin
                test = {MrEventHandler}
                struct_assign, draw_handler, test
                *self._draw_handler = test
            endcase
            'STRING': *self._draw_handler = draw_handler
            else: message, 'DRAW_HANDLER must be a string or structure.', /INFORMATIONAL
        endcase
    endif
    
    ;EVENT_HANDLER
    if n_elements(event_handler) gt 0 then begin
        if size(event_handler, /TNAME) eq 'OBJREF' then begin
            if obj_valid(event_handler) $
                then *self._event_handler = event_handler $
                else *self._event_handler = obj_new()
        endif else begin
            message, 'EVENT_HANDLER must be an object reference.', /INFORMATIONAL
            help, event_handler
            help, /tr
        endelse
    endif

    ;CONTEXT_HANDLER
    if n_elements(context_handler) gt 0 then begin
        case size(context_handler, /TNAME) of
            'STRUCT': begin
                test = {MrEventHandler}
                struct_assign, context_handler, test
                *self._context_handler = test
            endcase
            'STRING': *self._context_handler = context_handler            
            else: message, 'CONTEXT_HANDLER must be a string or structure.', /INFORMATIONAL
        endcase
    endif
    
    ;DRAG_NOTIFY
    if n_elements(drag_notify) gt 0 then begin
        case size(drag_notify, /TNAME) of
            'STRUCT': begin
                test = {MrEventHandler}
                struct_assign, drag_notify, test
                *self._drag_notify = test
                widget_control, self._id, SET_DRAG_NOTIFY='MrWidgetAtom_Drag_Notify'
            endcase
            'STRING': begin
                widget_control, self_id, SET_DRAG_NOTIFY=func_get_value
                *self._drag_notify = drag_notify
            endcase
            else: message, 'DRAG_NOTIFY must be a string or structure.', /INFORMATIONAL
        endcase
    endif

    ;DROP_HANDLER
    if n_elements(drop_handler) gt 0 then begin
        case size(drop_handler, /TNAME) of
            'STRUCT': begin
                test = {MrEventHandler}
                struct_assign, drop_handler, test
                *self._drop_handler = test
            endcase
            'STRING': *self._drop_handler = drop_handler            
            else: message, 'DROP_HANDLER must be a string or structure.', /INFORMATIONAL
        endcase
    endif
    
    ;EXPOSE_HANDLER
    if n_elements(expose_handler) gt 0 then begin
        case size(expose_handler, /TNAME) of
            'STRUCT': begin
                test = {MrEventHandler}
                struct_assign, expose_handler, test
                *self._expose_handler = test
            endcase
            'STRING': *self._expose_handler = expose_handler            
            else: message, 'EXPOSE_HANDLER must be a string or structure.', /INFORMATIONAL
        endcase
    endif
    
    ;MOUSE HANDLERS
    if n_elements(keyboard_handler)     gt 0 then self._keyboard_handler     = mouse_down_handler
    if n_elements(mouse_down_handler)   gt 0 then self._mouse_down_handler   = mouse_down_handler
    if n_elements(mouse_up_handler)     gt 0 then self._mouse_up_handler     = mouse_down_handler
    if n_elements(mouse_motion_handler) gt 0 then self._mouse_motion_handler = mouse_down_handler
    if n_elements(mouse_wheel_handler)  gt 0 then self._mouse_wheel_handler  = mouse_down_handler
        
    ;VIEWPORT_HANDLER
    if n_elements(viewport_handler) gt 0 then begin
        case size(viewport_handler, /TNAME) of
            'STRUCT': begin
                test = {MrEventHandler}
                struct_assign, viewport_handler, test
                *self._viewport_handler = test
            endcase
            'STRING': *self._viewport_handler = viewport_handler            
            else: message, 'VIEWPORT_HANDLER must be a string or structure.', /INFORMATIONAL
        endcase
    endif
END


;+
;   Event handling method for Viewport Move events.
;
; :Private:
;
; :Params:
;       EVENT:              in, optional, type=structure
;                           An event structure returned by the windows manager.
;-
pro MrDrawWidget::Viewport_Events, event
    ;Nothing to do yet.
end


;+
;   This is the MrDrawWidget object class destructor method.
;
; :Private:
;-
pro MrDrawWidget::cleanup
    compile_opt strictarr
    
    ;Error handling
    catch, the_error
    if the_error ne 0 then begin
        catch, /cancel
        void = cgErrorMsg()
        return
    endif

    ;Free event handlers (but do not destroy event handling objects)
    ptr_free, self._drag_notify
    ptr_free, self._drop_handler
    ptr_free, self._expose_handler
    ptr_free, self._viewport_handler

    ;Destroy the pixmap object
    if obj_valid(self._oTLB)   then self._oTLB -> Destroy
    if obj_valid(self._pixmap) then obj_destroy, self._pixmap
    
    ;Clean up the superclasses
    self -> MrWidgetAtom::Cleanup
    self -> MrIDL_Container::Cleanup
    self -> MrGraphicsEventAdapter::Cleanup
end


;+
;   This is the MrDrawWidget object class initialization method
;
; :Params:
;       PARENT:         in, optional, type=integer/object
;                       Either the widget ID of a parent widget or MrTopLevelBase object
;                           reference. If not provided, the draw widget will be placed
;                           in a resizeable top level base widget.
;
; :Keywords:
;       APP_SCROLL:     in, optional, type=boolean
;                       A memory-saving way of scrolling draw widgets.
;                           See WIDGET_DRAW documentation.
;   BACKGROUND_COLOR:   in, optional, type=string, default='White'
;                       The name of the initial color for the draw widget. Used when
;                           realized and if the draw widget is set up to erase before
;                           display (i.e., NOERASE=0).
;       BUTTON_EVENTS:  in, optional, type=boolean, default=0
;                       If set, button events will be enabled.
;       CONTEXT_EVENTS: in, optional, type=boolean, default=0
;                       If set, context events will be enabled.
;       DRAG_NOTIFY:    in, optional, type=string/structure
;                       If a string, the name of a procedure to be called when items are
;                           dragged over the window. If a structure, it defines the object
;                           and its procedure method that will handle the event.
;       DRAW_HANDLER:   in, optional, type=string/structure
;                       If a string is provided, it is the name of a procedure
;                           to be called when events are generated. If a structure
;                           is provided, its only fields must be "object" and "method",
;                           describing the procedure method to be used as an event
;                           handler::
;                               {object: oRef, $
;                               method: 'callback_method'}
;                           For function event handling, set the `FUNCTION_CALLBACK`
;                           keyword. If set, all of the *_HANDLER keywords will be
;                           ignored.
;       DROP_EVENTS:    in, optional, type=boolean, default=0
;                       If set, drop events will be enabled.
;       DROP_HANDLER:   in, optional, type=string/structure
;                       Either the name of the procedure or a structure defining an object
;                           method to be called when drop events are generated.
;       EVENT_HANDLER:  in, optional, type=object
;                       The object used when events are generated. It object must be
;                           a subclass of `MrGraphicsEventAdapter`.
;       EXPOSE_EVENTS:  in, optional, type=boolean, default=0
;                       If set, expose events will be enabled.
;       EXPOSE_HANDLER: in, optional, type=string/structure
;                       Either the name of the procedure or a structure defining an object
;                           method to be called when expose events are generated.
;   FUNCTION_CALLBACKS: in, optional, type=boolean, default=0
;                       If set, function callbacks will be used, not procedures. This
;                           switches `EVENT_HANDLER` from EVENT_PRO to EVENT_FUNC.
;
;       FRAME:          in, optional, type=integer, default=0
;                       Create a frame this many pixels wide around the widget.
;       GROUP_LEADER:   in, optional, type=integer
;                       The ID of a widget that serves as the group leader. If the group
;                           leader is destroyed, all widgets in the group are destroyed
;                           as well.
; IGNORE_ACCELERATORS:  in, optional, type=boolean/string/strarr, default=0
;                       Set this keyword to specify what WIDGET_BUTTON accelerators are
;                           to be ignored when this draw widget has keyboard focus.
;                           Setting IGNORE_ACCELERATORS allows a defined list of
;                           accelerators to be processed by the draw widget instead
;                           of by the conflicting accelerated button. Valid values are::
;                             1             -- All accelerators should be ignored.
;                             string/strarr -- Any value that is legal for the
;                                              ACCELERATOR keyword for BUTTONWIDGET
;   KEYBOARD_EVENTS:    in, optional, type=boolean, default=0
;                       If set, keyboard events will be enabled.
;   KEYBOARD_HANDLER:   in, optional, type=string, default=''
;                       The name of a function to be called when keyboard events are
;                           generated. See `Widget_Window <http://exelisvis.com/docs/WIDGET_WINDOW.html>`
;                           for details. Also, the `DRAW_HANDLER` and `EVENT_HANDLER`
;                           keywords provide a simpler means of handling events.
;       MOTION_EVENTS:  in, optional, type=boolean, default=0
;                       If set, motion events will be enabled.
;   MOUSE_UP_HANDLER:   in, optional, type=string, default=''
;                       The name of a function to be called when button up events are
;                           generated. See `Widget_Window <http://exelisvis.com/docs/WIDGET_WINDOW.html>`
;                           for details. Also, the `DRAW_HANDLER` and `EVENT_HANDLER`
;                           keywords provide a simpler means of handling events.
;   MOUSE_DOWN_HANDLER: in, optional, type=string, default=''
;                       The name of a function to be called when button down events are
;                           generated. See `Widget_Window <http://exelisvis.com/docs/WIDGET_WINDOW.html>`
;                           for details. Also, the `DRAW_HANDLER` and `EVENT_HANDLER`
;                           keywords provide a simpler means of handling events.
; MOUSE_MOTION_HANDLER: in, optional, type=string, default=''
;                       The name of a function to be called when the mouse motion events are
;                           generated. See `Widget_Window <http://exelisvis.com/docs/WIDGET_WINDOW.html>`
;                           for details. Also, the `DRAW_HANDLER` and `EVENT_HANDLER`
;                           keywords provide a simpler means of handling events.
; MOUSE_WHEEL_HANDLER:  in, optional, type=string, default=''
;                       The name of a function to be called when mouse wheel events are
;                           generated. See `Widget_Window <http://exelisvis.com/docs/WIDGET_WINDOW.html>`
;                           for details. Also, the `DRAW_HANDLER` and `EVENT_HANDLER`
;                           keywords provide a simpler means of handling events.
;       NOERASE:        in, optional, type=boolean, default=0
;                       If set, the draw widget will not be erased before drawing.
;       NOTIFY_REALISE: in, optional, type=string/structure
;                       Either the name of the procedure or a structure defining an object
;                           method to be called when the draw widget is realized.
;       RENDERER:       in, optional, type=integer, defualt=0
;                       Which graphics renderer to use. Options are::
;                           0 - Platform native OpenGL
;                           1 - IDL's software implementation
;       REFRESH:        In, optional, type=boolean, default=1
;                       Set to zero to prohibit the draw widget from refreshing.
;       RESOURCE_NAME:  in, optional, type=string
;                       X Window's resource name applied to the widget.
;       RETAIN:         in, optional, type=integer, default="{windows: 1, unix: 2}"
;                       Set this keyword to determine how backing store is handled.
;       SCR_XSIZE:      in, optional, type=integer
;                       Set the screen X size of the base to this many pixels. (Use discouraged.)
;       SCR_YSIZE:      in, optional, type=integer
;                       Set the screen Y size of the base to this many pixels. (Use discouraged.)
;       SCROLL:         in, optional, type=boolean, default=0
;                       Set this keyword to add scroll bars to the draw widget.
;       TOOLTIP:        in, optional, type=string, default=''
;                       A string displayed when the cursor hovers over the draw widget.
;       UNITS:          in, optional, type=integer, default=0
;                       The units for measurments. Choices are::
;                           0 - Pixels
;                           1 - Inches
;                           2 - Centimeters
;   VIEWPORT_EVENTS:    in, optional, type=boolean, default=0
;                       If set, viewport scroll events will be enabled.
;   VIEWPORT_HANLER:    in, optional, type=string/structure
;                       Either the name of the procedure or a structure defining an object
;                           method to be called when viewport scroll events are generated.
;       WHEEL_EVENTS:   in, optional, type=boolean, default=0
;                       If set, wheel events will be enabled.
;       WINDOW_TITLE:   in, optional, type=string, default='MrDrawWidget'
;                       Name to be placed on the window's title bar. Ignored if `PARENT`
;                           is given.
;       X_SCROLL_SIZE:  in, optional, type=integer
;                       The X size (pixels) of the scrollable window area.
;       XOFFSET:        in, optional, type=integer
;                       The horizontal space (pixels) from upper left corner of the display.
;       XSIZE:          in, optional, type=integer, default=300
;                       The X size of the widget. (300 pixels by default.)
;       Y_SCROLL_SIZE:  in, optional, type=integer
;                       The Y size (pixels) of the scrollable window area
;       YOFFSET:        in, optional, type=integer
;                       The vertical space (pixels) from upper left corner of the display.
;       YSIZE:          in, optional, type=integer, default=300
;                       The Y size of the widget.
;       _REF_EXTRA:     in, optional, type=any
;                       Any keyword appropriate for the superclass INIT methods.
;-
function MrDrawWidget::init, parent,   $
;MrDrawWidget Keywords
 BACKGROUND=background, $
 FUNCTION_CALLBACK=function_callback, $
 NOERASE=noerase, $
 REFRESH=refresh, $
 WINDOW_TITLE=window_title, $
;Widget_Draw Keywords
 APP_SCROLL=app_scroll, $
; CLASSNAME=classname, $
; COLOR_MODEL=color_model, $
; COLORS=colors, $
 FRAME=frame, $
 GROUP_LEADER=group_leader, $
 IGNORE_ACCELERATORS=ignore_accelerators, $
 RENDERER=renderer, $
 RESOURCE_NAME=resource_name, $
 RETAIN=retain, $
 SCR_XSIZE=scr_xsize, $
 SCR_YSIZE=scr_ysize, $
 SCROLL=scroll, $
 TOOLTIP=tooltip, $
 UNITS=units, $
 X_SCROLL_SIZE=x_scroll_size, $
 XOFFSET=xoffset, $
 XSIZE=xsize, $
 Y_SCROLL_SIZE=y_scroll_size, $
 YOFFSET=yoffset, $
 YSIZE=ysize, $
 ;EVENTS
 BUTTON_EVENTS=button_events, $
 DROP_EVENTS=drop_events, $
 EXPOSE_EVENTS=expose_events, $
 KEYBOARD_EVENTS=keyboard_events, $
 MOTION_EVENTS=motion_events, $
 VIEWPORT_EVENTS=viewport_events, $
 WHEEL_EVENTS=wheel_events, $
 ;EVENT HANDLERS
 DRAG_NOTIFY=drag_notify, $
 DRAW_HANDLER=draw_handler, $
 DROP_HANDLER=drop_handler, $
 EVENT_HANDLER=event_handler, $
 EXPOSE_HANDLER=expose_handler, $
 KEYBOARD_HANDLER=keyboard_handler, $
 MOUSE_UP_HANDLER=mouse_up_handler, $
 MOUSE_DOWN_HANDLER=mouse_down_handler, $
 MOUSE_MOTION_HANDLER=mouse_motion_handler, $
 MOUSE_WHEEL_HANDLER=mouse_wheel_handler, $
 NOTIFY_REALIZE=notify_realize, $
 VIEWPORT_HANDLER=viewport_handler, $
_REF_EXTRA=extra
   compile_opt strictarr
    
    ;Error handling
    catch, the_error
    if the_error ne 0 then begin
        catch, /cancel
        void = cgErrorMsg()
        return, 0
    endif

;---------------------------------------------------------------------
;Defaults ////////////////////////////////////////////////////////////
;---------------------------------------------------------------------
;    self._nodraw = keyword_set(nodraw)
    function_callbacks = keyword_set(function_callbacks)
    noerase            = keyword_set(noerase)
    refresh            = keyword_set(refresh)
    if n_elements(background_color) eq 0 then background_color = 'White'
    if n_elements(retain)           eq 0 then retain=(!version.os_family eq 'windows') ? 1 : 2
    if n_elements(xsize)            eq 0 then xsize = 300
    if n_elements(ysize)            eq 0 then ysize = 300

    ;Default handlers
    if n_elements(draw_handler)         eq 0 then draw_handler         = self
    if n_elements(drag_notify)          eq 0 then drag_notify          = {object: self, method: 'Drag_Notify'}
    if n_elements(drop_handler)         eq 0 then drop_handler         = {object: self, method: 'Drop_Events'}
    if n_elements(expose_handler)       eq 0 then expose_handler       = {object: self, method: 'Expose_Events'}
    if n_elements(keyboard_handler)     eq 0 then keyboard_handler     = ''
    if n_elements(mouse_up_handler)     eq 0 then mouse_up_handler     = ''
    if n_elements(mouse_down_handler)   eq 0 then mouse_down_handler   = ''
    if n_elements(mouse_motion_handler) eq 0 then mouse_motion_handler = ''
    if n_elements(mouse_wheel_handler)  eq 0 then mouse_wheel_handler  = ''
    if n_elements(viewport_handler)     eq 0 then viewport_handler     = {object: self, method: 'Viewport_Events'}
    
    ;Allocate heap
    self._drag_notify          = ptr_new(/ALLOCATE_HEAP)
    self._drop_handler         = ptr_new(/ALLOCATE_HEAP)
    self._expose_handler       = ptr_new(/ALLOCATE_HEAP)
    self._viewport_handler     = ptr_new(/ALLOCATE_HEAP)

;---------------------------------------------------------------------
; Parent /////////////////////////////////////////////////////////////
;---------------------------------------------------------------------

    ;Create a MrTopLevelBase object to use as the parent
    if n_elements(parent) eq 0 then begin
        self -> BuildWindow, WINDOW_TITLE=window_title
        self._oTLB -> GetProperty, ID=parentID

    ;Use an existing MrTopLevelBase object as the parent.
    endif else if size(parent, /TNAME) eq 'OBJREF' then begin
        tf_MrTLB = cgObj_IsA(parent, 'MrTopLevelBase')
        if tf_MrTLB eq 0 then message, 'Only "MrTopLevelBase" objects may be given as a parent object.'
        self._oTLB = parent
        self._oTLB -> GetProperty, ID=parentID
    
    ;Use a normal widget base as the parent.
    endif else begin
        self._oTLB = parent
        parentID = parent
    endelse
    
;---------------------------------------------------------------------
; Create the Draw Widget /////////////////////////////////////////////
;---------------------------------------------------------------------
    self._id = widget_draw( parentID,   $
                            APP_SCROLL          = app_scroll, $
                            CLASSNAME           = classname, $
                            COLOR_MODEL         = color_model, $
                            COLORS              = colors, $
                            FRAME               = frame, $
                            GROUP_LEADER        = group_leader, $
                            IGNORE_ACCELERATORS = ignore_accelerators, $
                            RENDERER            = renderer, $
                            RESOURCE_NAME       = resource_name, $
                            RETAIN              = retain, $
                            SCR_XSIZE           = scr_xsize, $
                            SCR_YSIZE           = scr_ysize, $
                            SCROLL              = scroll, $
                            TOOLTIP             = tooltip, $
                            UNITS               = units, $
                            X_SCROLL_SIZE       = x_scroll_size, $
                            XOFFSET             = xoffset, $
                            XSIZE               = xsize, $
                            Y_SCROLL_SIZE       = y_scroll_size, $
                            YOFFSET             = yoffset, $
                            YSIZE               = ysize $
                          )

;---------------------------------------------------------------------
; Superclasses ///////////////////////////////////////////////////////
;---------------------------------------------------------------------

    self._background = background_color
    self._noerase    = noerase
    self._refresh    = refresh

    success = self -> MrWidgetAtom::INIT(NOTIFY_REALIZE=notify_realize, $
                                         EVENT_HANDLER=draw_handler, $
                                         _STRICT_EXTRA=extra)
    if success eq 0 then message, 'MrWidgetAtom could not be initialized.'
    
    self -> SetProperty, FUNCTION_CALLBACKS=function_callbacks, $
                         DRAG_NOTIFY=drag_notify, $
                         DROP_HANDLER=drop_handler, $
                         EXPOSE_HANDLER=expose_handler, $
                         KEYBOARD_HANDLER=keyboard_handler, $
                         MOUSE_DOWN_HANDLER=mouse_down_handler, $
                         MOUSE_UP_HANDLER=mouse_up_handler, $
                         MOUSE_MOTION_HANDLER=mouse_motion_handler, $
                         MOUSE_WHEEL_HANDLER=mouse_wheel_handler, $
                         VIEWPORT_HANDLER=viewport_handler

;---------------------------------------------------------------------
; Return Step ////////////////////////////////////////////////////////
;---------------------------------------------------------------------
        
    ;Set the user value of the widget as the TLB object reference.
    widget_control, self._id, SET_UVALUE=self

    ;If we created a new tlb, realize it now and register it with XManager.
    if n_elements(parent) eq 0 and obj_valid(self._oTLB) then begin
        self._oTLB -> XManager
    endif

    return, 1
end



;+
;   The class definition statement.
;
; :Params:
;       CLASS:          out, optional, type=structure
;                       The class definition structure.
;-
pro MrDrawWidget__define, class

   class = { MrDrawWidget, $
             inherits MrWidgetAtom, $
             inherits MrIDL_Container, $
             inherits MrGraphicsEventAdapter, $
             _oTLB:       obj_new(), $      ;A top-level base widget object, if required.
             _winID:      0L, $             ;The window ID of the draw window.
             _background: '', $             ;Background color of the display.
             _noerase:    0B, $             ;Prevents the widget from being erased.
             _refresh:    0B, $             ;Refresh the graphics window
             
             ;Draw Event Handlers
             _keyboard_handler:     '', $
             _mouse_down_handler:   '', $
             _mouse_up_handler:     '', $
             _mouse_motion_handler: '', $
             _mouse_wheel_handler:  '', $
             
             ;Method Event Handlers
             _draw_handler:     ptr_new(), $
             _drag_notify:      ptr_new(), $
             _drop_handler:     ptr_new(), $
             _expose_handler:   ptr_new(), $
             _viewport_handler: ptr_new(), $
            
             _pixmap: obj_new() $       ; the identifier of a pixmapwidget that can carry out window refresh.
           }
end