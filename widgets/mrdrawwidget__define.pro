;+
;   General event handler for the MrTopLevelBase widget class. Its purpose is to forward
;   the different events generated by the XManager to their respective event handling
;   methods.
;
; :Params:
;       EVENT:              in, optional, type=structure
;                           An event structure returned by the windows manager.
;-
pro MrDrawWidget_Drag_Notify, destination, source, x, y, modifiers, default
   compile_opt strictarr
    
    ;Error handling
    catch, the_error
    if the_error ne 0 then begin
        catch, /cancel
        void = cgErrorMsg()
        return
    endif
    
    ;Type of event that was generated.
    event_name = size(event, /SNAME)
    widget_control, event.id, GET_UVALUE=oRef
    oRef -> GetProperty, DRAG_NOTIFY_EVENT_HANDLER=drag_notify_eh
    
    ;Forward the event.
    case size(drag_notify_eh, /TNAME) of
        'STRUCT': Call_Method, drag_notify_eh.method, drag_notify_eh.object, destination, source, x, y, modifiers, default
        'STRING': Call_Procedure, drag_notify_eh.method, drag_notify_eh.object, destination, source, x, y, modifiers, default
    endcase
end


;+
;   General event handler for the MrTopLevelBase widget class. Its purpose is to forward
;   the different events generated by the XManager to their respective event handling
;   methods.
;
; :Params:
;       EVENT:              in, optional, type=structure
;                           An event structure returned by the windows manager.
;-
pro MrDrawWidget_Event_Pro, event
   compile_opt strictarr
    
    ;Error handling
    catch, the_error
    if the_error ne 0 then begin
        catch, /cancel
        void = cgErrorMsg()
        return
    endif
    
    ;Type of event that was generated.
    event_name = size(event, /SNAME)
    widget_control, event.id, GET_UVALUE=oRef
    
;---------------------------------------------------------------------
;Callback Object /////////////////////////////////////////////////////
;---------------------------------------------------------------------
    ;If another object is handling events, forward the event and exit.
    oRef -> GetProperty, EVENT_HANDLER=event_handler, DRAW_EVENT_HANDLER=draw_event_handler
    if obj_valid(event_handler) then begin
        Call_Method, event_handler.method, event_handler.object, event
        return
    endif
    
;---------------------------------------------------------------------
;Callback Pro/Method /////////////////////////////////////////////////
;---------------------------------------------------------------------
    ;Types of events
    event_type = ['MOUSE_DOWN', 'MOUSE_UP', 'MOUSE_MOTION', 'VIEWPORT_MOVE', 'EXPOSE', $
                  'KBRD_ASCII', 'KBRD', 'MOUSE_WHEEL']
    
    ;---------------------------------------------------------------------
    ;Object for Draw Event Callback? /////////////////////////////////////
    ;---------------------------------------------------------------------
    if obj_valid(draw_event_handler) then begin
        case event_type[event.type] of
            'MOUSE_DOWN':   draw_event_handler -> MouseDown,   self, event.x, event.y, event.button, event.modifiers, event.clicks
            'MOUSE_UP':     draw_event_handler -> MouseUp,     self, event.x, event.y, event.button
            'MOUSE_MOTION': draw_event_handler -> MouseMotion, self, event.x, event.y, event.modifiers
            'MOUSE_WHEEL':  draw_event_handler -> MouseWheel,  self, event.x, event.y, event.clicks, event.modifiers
            'KBRD_ASKII':   draw_event_handler -> KeyHandler,  self, 1, event.ch, event.key, event.x, event.y, event.press, event.release, event.modifiers
            'KBRD':         draw_event_handler -> KeyHandler,  self, 0, event.ch, event.key, event.x, event.y, event.press, event.release, event.modifiers
            else: ;Do nothing
        endcase
        
    ;---------------------------------------------------------------------
    ;Pro/Method Callback? ////////////////////////////////////////////////
    ;---------------------------------------------------------------------
    endif else begin
        case event_type[event.type] of
            'MOUSE_DOWN': begin
                oRef -> GetProperty, BUTTON_EVENT_HANDLER=button_eh
                case size(button_eh, /TNAME) of
                    'OBJREF': Call_Method, button_eh.method, button_eh.object, event
                    'STRING': if button_eh ne '' then Call_Procedure, button_eh, event
                endcase
            endcase
        
            'MOUSE_UP': begin
                oRef -> GetProperty, BUTTON_EVENT_HANDLER=button_eh
                case size(button_eh, /TNAME) of
                    'OBJREF': Call_Method, button_eh.method, button_eh.object, event
                    'STRING': if button_eh ne '' then Call_Procedure, button_eh, event
                endcase
            endcase
        
            'MOUSE_MOTION': begin
                oRef -> GetProperty, MOTION_EVENT_HANDLER=motion_eh
                case size(kbrd_focus_eh, /TNAME) of
                    'OBJREF': Call_Method, motion_eh.method, motion_eh.object, event
                    'STRING': if motion_eh ne '' then Call_Procedure, motion_eh, event
                endcase
            endcase
        
            'MOUSE_WHEEL': begin
                oRef -> GetProperty, WHEEL_EVENT_HANDLER=wheel_eh
                case size(wheel_eh, /TNAME) of
                    'OBJREF': Call_Method, wheel_eh.method, wheel_eh.object, event
                    'STRING': if wheel_eh ne '' then Call_Procedure, wheel_eh, event
                endcase
            endcase
        
            'KBRD_ASCII': begin
                oRef -> GetProperty, KEYBOARD_EVENT_HANDLER=keyboard_eh
                case size(kbrd_focus_eh, /TNAME) of
                    'OBJREF': Call_Method, keyboard_eh.method, keyboard_eh.object, event
                    'STRING': if keyboard_eh ne '' then Call_Procedure, keyboard_eh, event
                endcase
            endcase
        
            'KBRD': begin
                oRef -> GetProperty, KEYBOARD_EVENT_HANDLER=keyboard_eh
                case size(keyboard_eh, /TNAME) of
                    'OBJREF': Call_Method, keyboard_eh.method, keyboard_eh.object, event
                    'STRING': if keyboard_eh ne '' then Call_Procedure, keyboard_eh, event
                endcase
            endcase
            
            else: ;Do nothing
        endcase
    endelse
        
;---------------------------------------------------------------------
;More Pro/Method Callback ////////////////////////////////////////////
;---------------------------------------------------------------------
    case event_type[event.type] of
        'VIEWPORT_MOVE': begin
            oRef -> GetProperty, VIEWPORT_EVENT_HANDLER=viewport_en
            case size(viewport_en, /TNAME) of
                'OBJREF': Call_Method, viewport_en.method, viewport_en.object, event
                'STRING': if viewport_en ne '' then Call_Procedure, viewport_en, event
            endcase
        endcase
        
        'EXPOSE': begin
            oRef -> GetProperty, EXPOSE_EVENT_HANDLER=expose_eh
            case size(expose_eh, /TNAME) of
                'OBJREF': Call_Method, expose_eh.method, expose_eh.object, event
                'STRING': if expose_eh ne '' then Call_Procedure, expose_eh, event
            endcase
        endcase
        
        else: ;Do nothing
    endcase
    
    ;Just in case, send the event to MrWidgetAtom as well
    self -> MrWidgetAtom::Event_Pro, event
end


;+
;   Event handling function for Event_Func.
;
; :Params:
;       EVENT:              in, optional, type=structure
;                           An event structure returned by the windows manager.
;-
function MrDrawWidget_Event_Func, event
   compile_opt strictarr
    
    ;Error handling
    catch, the_error
    if the_error ne 0 then begin
        catch, /cancel
        void = cgErrorMsg()
        return, 0
    endif
    
    ;Type of event that was generated.
    event_name = size(event, /SNAME)
    widget_control, event.top, GET_UVALUE=oRef
    
;---------------------------------------------------------------------
;Callback Object /////////////////////////////////////////////////////
;---------------------------------------------------------------------
    ;If another object is handling events, forward the event and exit.
    oRef -> GetProperty, EVENT_HANDLER=event_handler, DRAW_EVENT_HANDLER=draw_event_handler
    if obj_valid(event_handler) then begin
        result = Call_Method(event_handler.method, event_handler.object, event)
        return, result
    endif
    
;---------------------------------------------------------------------
;Callback Func/Method ////////////////////////////////////////////////
;---------------------------------------------------------------------
    
    ;Types of events
    event_type = ['MOUSE_DOWN', 'MOUSE_UP', 'MOUSE_MOTION', 'VIEWPORT_MOVE', 'EXPOSE', $
                  'KBRD_ASCII', 'KBRD', 'MOUSE_WHEEL']
    
    ;---------------------------------------------------------------------
    ;Object for Draw Event Callback? /////////////////////////////////////
    ;---------------------------------------------------------------------
    if obj_valid(self.draw_event_handler) then begin
        case event_type[event.type] of
            'MOUSE_DOWN':   self.draw_event_handler -> MouseDown,   self, event.x, event.y, event.button, event.modifiers, event.clicks
            'MOUSE_UP':     self.draw_event_handler -> MouseUp,     self, event.x, event.y, event.button
            'MOUSE_MOTION': self.draw_event_handler -> MouseMotion, self, event.x, event.y, event.modifiers
            'MOUSE_WHEEL':  self.draw_event_handler -> MouseWheel,  self, event.x, event.y, event.clicks, event.modifiers
            'KBRD_ASKII':   self.draw_event_handler -> KeyHandler,  self, 1, event.ch, event.key, event.x, event.y, event.press, event.release, event.modifiers
            'KBRD':         self.draw_event_handler -> KeyHandler,  self, 0, event.ch, event.key, event.x, event.y, event.press, event.release, event.modifiers
            else: ;Do nothing
        endcase
        
    ;---------------------------------------------------------------------
    ;Pro/Method Callback? ////////////////////////////////////////////////
    ;---------------------------------------------------------------------
    endif else begin
        case event_type[event.type] of
            'MOUSE_DOWN': begin
                oTLB -> GetProperty, BUTTON_EVENT_HANDLER=button_eh
                case size(button_eh, /TNAME) of
                    'OBJREF': result = Call_Method(button_eh.method, button_eh.object, event)
                    'STRING': if button_eh ne '' then result = Call_Function(button_eh, event)
                endcase
            endcase
        
            'MOUSE_UP': begin
                oTLB -> GetProperty, BUTTON_EVENT_HANDLER=button_eh
                case size(button_eh, /TNAME) of
                    'OBJREF': result = Call_Method(button_eh.method, button_eh.object, event)
                    'STRING': if button_eh ne '' then result = Call_Function(button_eh, event)
                endcase
            endcase
        
            'MOUSE_MOTION': begin
                oTLB -> GetProperty, MOTION_EVENT_HANDLER=motion_eh
                case size(motion_eh, /TNAME) of
                    'OBJREF': result = Call_Method(motion_eh.method, motion_eh.object, event)
                    'STRING': if motion_eh ne '' then result = Call_Function(motion_eh, event)
                endcase
            endcase
        
            'MOUSE_WHEEL': begin
                oTLB -> GetProperty, WHEEL_EVENT_HANDLER=wheel_events
                case size(wheel_events, /TNAME) of
                    'OBJREF': result = Call_Method(wheel_events.method, wheel_events.object, event)
                    'STRING': if wheel_events ne '' then result = Call_Function(wheel_events, event)
                endcase
            endcase
        
            'KBRD_ASCII': begin
                oTLB -> GetProperty, KEYBOARD_EVENT_HANDLER=keyboard_eh
                case size(keyboard_eh, /TNAME) of
                    'OBJREF': result = Call_Method(keyboard_eh.method, keyboard_eh.object, event)
                    'STRING': if keyboard_eh ne '' then result = Call_Function(keyboard_eh, event)
                endcase
            endcase
        
            'KBRD': begin
                oTLB -> GetProperty, KEYBOARD_EVENT_HANDLER=keyboard_eh
                case size(keyboard_eh, /TNAME) of
                    'OBJREF': result = Call_Method(keyboard_eh.method, keyboard_eh.object, event)
                    'STRING': if keyboard_eh ne '' then result = Call_Function(keyboard_eh, event)
                endcase
            endcase
            
            else: ;Do nothing
        endcase
    endelse
        
;---------------------------------------------------------------------
;More Pro/Method Callback ////////////////////////////////////////////
;---------------------------------------------------------------------
    case event_type[event.type] of
        
        'VIEWPORT_MOVE': begin
            oTLB -> GetProperty, VIEWPORT_EVENT_HANDLER=viewport_eh
            case size(viewport_eh, /TNAME) of
                'OBJREF': result = Call_Method(viewport_eh.method, viewport_eh.object, event)
                'STRING': if viewport_eh ne '' then result = Call_Function(viewport_eh, event)
            endcase
        endcase
        
        'EXPOSE': begin
            oTLB -> GetProperty, EXPOSE_EVENT_HANDLER=expose_eh
            case size(expose_eh, /TNAME) of
                'OBJREF': result = Call_Method(expose_eh.method, expose_eh.object, event)
                'STRING': if expose_eh ne '' then result = Call_Function(expose_eh, event)
            endcase
        endcase
        
        else: ;Do nothing
    endcase
    
    ;If no result yet, check MrWidgetAtom
    if n_elements(result) eq 0 then result = self -> MrWidgetAtom::Event_Func(event)
    
    return, result
end


;*****************************************************************************************************
;+
; NAME:
;       DRAWWIDGET::DRAW
;
; PURPOSE:
;
;       This method draws the contents of the draw widget object's container in the draw widget window.
;       It does this by calling the DRAW methods of any objects found in its container object.
;;
; SYNTAX:
;
;       thisDrawObj -> Draw
;
; ARGUMENTS:
;
;       None.
;
; KEYWORDS:
;
;       BACKGROUND_COLOR: Set this keyword to the name of the background color. Used
;                         only when erasing window contents. On 8-bit displays, this
;                         will load a color in !P.BACKGROUND. The color "BLACK" by default.
;
;       ERASE_WINDOW:     Set this keyword to erase the window before drawing contents.
;
;       HOURGLASS:        Set this keyword to enable the hourglass cursor for the draw operation.
;
;       REQUESTER:        This optional keyword is set to the object that requests a DRAW of the
;                         DrawWidget. This is helpful sometimes when DRAWWIDGET_DRAW messages
;                         are received by other objects. The object reference is passed on as
;                         the DATA in the DRAWWIDGET_DRAW message.
;
;       TARGET_WINDOW:    Normally the draw widget draws into its own window. But, sometimes you
;                         want the draw widget to draw somewhere else. Setting this keyword to
;                         another DRAWWIDGET or PIXMAPWIDGET object reference allows graphics
;                         to be drawn there.
;
;       TARGETS:          Typically, calling the DRAW method of a DrawWidget will call the DRAW
;                         method of any objects in its container. However, if the TARGETS keyword
;                         is set to an object reference (or array of object references), only these
;                         objects will be drawn. This would allow you, for example, to re-draw only
;                         a single image object in a window with several image objects.
;
;       _EXTRA:           Any extra keywords appropriate for superclass DRAW methods.
;-
;*****************************************************************************************************
PRO MrDrawWidget::Draw, $
 BACKGROUND_COLOR=background_color, $
 ERASE_WINDOW=erase_window, $
 HOURGLASS=hourglass, $
 REQUESTER=requester, $
 TARGET_WINDOW=target_window, $
 TARGETS=targets, $
_EXTRA=extraKeywords
   compile_opt strictarr
    
    ;Error handling
    catch, the_error
    if the_error ne 0 then begin
        catch, /cancel
        void = cgErrorMsg()
        return
    endif

    ;do not draw anything?
    if self._refresh eq 0 then return

    ;make sure the window is valid
    if (WindowAvailable(self._winID) eq 0) then message, 'Draw widget does not have a valid window id. Try realizing it.'

    ; check keywords.
    hourglass = keyword_set(hourglass)
    erase_window = keyword_set(erase_window)
    if n_elements(background_color) eq 0 then background_color = self._background

    ;Enable the hourglass mouse cursor, if needed.
    if hourglass then widget_control, /HOURGLASS

    ;If the device supports windows, switch to the draw window.
    if (!d.flags and 256) ne 0 then begin
        wset, self._winid

        ;Need the window erased?
;        if (erase_window or self._erasewindow) then erase, color=cgcolor(background_color, !p.background)
   endif
   
    ;Get all objects from the container
    allObj = self -> Get(/ALL, COUNT=nObj)
    
    ;Draw all of the objects.
    for i = 0, nObj - 1 do allObj[i] -> Draw
end


;+
;   The purpose of this method is to erase the draw window.
;-
pro MrDrawWidget::BuildWindow
   compile_opt strictarr
    
    ;Error handling
    catch, the_error
    if the_error ne 0 then begin
        catch, /cancel
        void = cgErrorMsg()
        return
    endif

    ;Create a resizeable, top level base for the window    
    self._oTLB = obj_new('MrTopLevelBase', TITLE='MrDrawWidget', $
                         TLB_SIZE_HANDLER={object: self, method: 'TLB_Resize_Events'}, $
                         /TLB_SIZE_EVENTS)
end


;+
;   The purpose of this method is to erase the draw window.
;-
pro MrDrawWidget::Erase
   compile_opt strictarr
    
    ;Error handling
    catch, the_error
    if the_error ne 0 then begin
        catch, /cancel
        void = cgErrorMsg()
        return
    endif
    
    ;Default background color
    if n_elements(color) eq 0 then color = self._background
    
    ;Erase the window.
    if (!d.flags and 256) ne 0 then wset, self._winID
    cgErase, color=cgcolor(self_background)
end


;+
;   Event handling method for Notify_Realize
;
; :Params:
;       EVENT:              in, optional, type=structure
;                           An event structure returned by the windows manager.
;-
pro MrDrawWidget::Notify_Realize, id
   compile_opt strictarr
    
    ;Error handling
    catch, the_error
    if the_error ne 0 then begin
        catch, /cancel
        void = cgErrorMsg()
        return
    endif
    
    ;Get the window ID of the draw widget
    widget_control, id, GET_VALUE=winID
    self._winID = winID

    ;Set the name of the window to include with window number.
    widget_control, id, TLB_SET_TITLE='MrDrawWidget (' + strtrim(winID,2) + ')'
    
    ;Draw as soon as the window is visible
    self -> Draw
end


;*****************************************************************************************************
;+
; NAME:
;       DRAWWIDGET::RESIZE
;
; PURPOSE:
;
;       This method resizes the canvas area of the draw widget.
;;
; SYNTAX:
;
;       thisDrawObj -> Resize, xsize, ysize
;
; ARGUMENTS:
;
;       XSIZE:    The new X size of the canvas area of the draw widget, in pixels.
;
;       YSIZE:    The new Y size of the canvas area of the draw widget, in pixels.
;
; KEYWORDS:
;
;       DRAW:     Set this keyword to call the draw method when the draw widget
;                 resizing is completed.
;
;       SCREEN:   Normally, the XSIZE and YSIZE keywords apply to the draw widget canvas.
;                 If the SCREEN keyword is set, the keywords apply to the screen coordinates
;                 of the draw widget. (It's actual size on the display. Usually about 6 pixels
;                 larger than the canvas.)
;
;       VIEWPORT: Normally, the XSIZE and YSIZE keywords apply to the draw widget canvas.
;                 If the VIEWPORT keyword is set, the keywords apply to the viewport size
;                 of the draw widget.
;
;       _EXTRA:   Any extra keywords appropriate for the DRAW method.
;-
;*****************************************************************************************************
PRO MrDrawWidget::Resize, xsize, ysize, $
 DRAW=draw, $
 SCREEN=screen, $
 VIEWPORT=viewport, $
_EXTRA=extraKeywords
   compile_opt strictarr
    
    ;Error handling
    catch, the_error
        if the_error ne 0 then begin
        catch, /cancel
        void = cgErrorMsg()
        return
    endif

    IF N_Elements(xsize) EQ 0 THEN Message, "XSIZE parameter is missing."
    IF N_Elements(ysize) EQ 0 THEN Message, "YSIZE parameter is missing."

    CASE 1 OF
        KEYWORD_SET(screen): Widget_Control, self._id, Scr_XSize=xsize, Scr_YSize=ysize
        KEYWORD_SET(viewport): Widget_Control, self._id, XSize=xsize, YSize=ysize
        ELSE: Widget_Control, self._id, Draw_XSize=xsize, Draw_YSize=ysize
    ENDCASE

    IF Keyword_Set(draw) THEN self -> Draw, _Extra=extraKeywords
END


;+
;   The purpose of this method it enable or diable refreshing of the display.
;
; :Keywords:
;       DISABLE:            in, optional, type=boolean, default=0
;                           If set, refreshing of the draw window will be disabled.
;-
pro MrDrawWidget::Refresh, $
DISABLE=disable
    compile_opt strictarr
    
    ;Error handling
    catch, the_error
    if the_error ne 0 then begin
        catch, /cancel
        void = cgErrorMsg()
        return
    endif
    
    ;Enable or disable.
    self._refresh = ~keyword_set(disable)
    
    ;Re-draw the window contents.
    if self._refresh then self -> Draw
end


;+
;   Event handling method for TLB_Size_Events. This method is only called if PARENT was
;   not provided when the draw widget was made.
;
; :Params:
;       EVENT:              in, optional, type=structure
;                           An event structure returned by the windows manager.
;-
pro MrDrawWidget::TLB_Resize_Events, event
    compile_opt strictarr
    
    ;Error handling
    catch, the_error
    if the_error ne 0 then begin
        catch, /cancel
        void = cgErrorMsg()
        return
    endif

    ;Subtract the height of the menu and status bars from the size of the top level base
    xNew = event.x
    yNew = event.y
    
    ;Set the new size of the draw widget
    self -> Resize, xNew, yNew
;    self.xsize = xNew
;    self.ysize = yNew

    ;Draw the plot to the new size
    self -> Draw
end


;+
;
;-
PRO MrDrawWidget::GetProperty, $
 ERASE_WINDOW=erase_window, $
 BACKGROUND=background, $
 
 ;Widget_Control Options
 IGNORE_ACCELERATORS=ignore_accelerators, $
 INPUT_FOCUS=input_focus, $
 SET_DRAW_VIEW=set_draw_view, $
 TOOLTIP=tooltip, $
 WINDOWID=windowID, $
 XSIZE=xsize, $
 YSIZE=ysize, $
 
 ;Events On or Off?
 BUTTON_EVENTS=button_events, $
 CONTEXT_EVENTS=context_events, $
 EXPOSE_EVENTS=expose_events, $
 KEYBOARD_EVENTS=keyboard_events, $
 MOTION_EVENTS=motion_events, $
 VIEWPORT_EVENTS=viewport_events, $
 WHEEL_EVENTS=wheel_events, $

 ;Method Event Handling
 BUTTON_HANDLER=button_handler, $
 CONTEXT_HANDLER=context_handler, $
 EXPOSE_HANDLER=expose_handler, $
 KEYBOARD_HANDLER=keyboard_handler, $
 MOTION_HANDLER=motion_handler, $
 VIEWPORT_HANDLER=viewport_handler, $
 WHEEL_HANDLER=wheel_handler, $
_REF_EXTRA=extra
   compile_opt strictarr

    ;Error handling
    catch, the_error
    if the_error ne 0 then begin
        catch, /cancel
        void = cgErrorMsg()
        return
    endif

    if widget_info(self._id, /VALID_ID) eq 0 then return

    if arg_present(background)     then background = self._background
    
    ;Widget_Control Options
    if arg_present(windowID)        then widget_control, self._id, GET_VALUE=windowID
    
    ;Events On or Off?
    if arg_present(button_events)   then button_events   = widget_info(self._id, /DRAW_BUTTON_EVENTS)
    if arg_present(context_events)  then context_events  = widget_info(self._id, /CONTEXT_EVENTS)
    if arg_present(expose_events)   then expose_events   = widget_info(self._id, /DRAW_EXPOSE_EVENTS)
    if arg_present(motion_events)   then motion_events   = widget_info(self._id, /DRAW_MOTION_EVENTS)
    if arg_present(viewport_events) then viewport_events = widget_info(self._id, /DRAW_VIEWPORT_EVENTS)
    if arg_present(keyboard_events) then keyboard_events = widget_info(self._id, /DRAW_KEYBOARD_EVENTS)
    if arg_present(tooltip)         then tooltip         = widget_info(self._id, /TOOLTIP)
    if arg_present(wheel_events)    then wheel_events    = widget_info(self._id, /DRAW_WHEEL_EVENTS)
   
    ;Method Event Handlers
    if arg_present(context_handler)      then context_handler      = *self._context_handler
    if arg_present(expose_handler)       then expose_handler       = *self._expose_handler
    if arg_present(keyboard_handler)     then keyboard_handler     = *self._keyboard_handler
    if arg_present(mouse_down_handler)   then mouse_down_handler   = *self._mouse_down_handler
    if arg_present(mouse_up_handler)     then mouse_up_handler     = *self._mouse_up_handler
    if arg_present(mouse_motion_handler) then mouse_motion_handler = *self._mouse_motion_handler
    if arg_present(mouse_wheel_handler)  then mouse_wheel_handler  = *self._mouse_wheel_handler
    if arg_present(viewport_handler)     then viewport_handler     = *self._viewport_handler

    ;Superclass Properties
    if n_elements(extra) gt 0 then self -> MrWidgetAtom::GetProperty, _STRICT_EXTRA=extra
end


;+
;
;-
PRO MrDrawWidget::SetProperty, $
 BACKGROUND=background, $
 ERASE_WINDOW=erase_window, $
 SCREEN=screen, $
 VIEWPORT_SIZE=viewport_size, $
 WINDOWID=windowID, $
 XSIZE=xsize, $
 YSIZE=ysize, $
 
 ;Turn Events On or Off
 BUTTON_EVENTS=button_events, $
 CONTEXT_EVENTS=context_events, $
 EXPOSE_EVENTS=expose_events, $
 KEYBOARD_EVENTS=keyboard_events, $
 MOTION_EVENTS=motion_events, $
 VIEWPORT_EVENTS=viewport_events, $
 WHEEL_EVENTS=wheel_events, $
 
 ;Widget_Control Options
 IGNORE_ACCELERATORS=ignore_accelerators, $
 INPUT_FOCUS=input_focus, $
 SET_DRAW_VIEW=set_draw_view, $
 TOOLTIP=tooltip, $

 ;Event Callback Function/Procedures/Methods
 CONTEXT_HANDLER=context_handler, $
 DRAG_NOTIFY=drag_notify, $
 DRAW_EVENT_HANDLER=draw_event_handler, $
 DROP_HANDLER=drop_handler, $
 EXPOSE_HANDLER=expose_handler, $
 KEYBOARD_HANDLER=keyboard_handler, $
 MOUSE_DOWN_HANDLER=mouse_down_handler, $
 MOUSE_UP_HANDLER=mouse_up_handler, $
 MOUSE_MOTION_HANDLER=mouses_motion_handler, $
 MOUSE_WHEEL_HANDLER=mouse_wheel_handler, $
 VIEWPORT_HANDLER=viewport_handler, $
_REF_EXTRA=extra
   compile_opt strictarr
    
    ;Error handling
    catch, the_error
    if the_error ne 0 then begin
        catch, /cancel
        void = cgErrorMsg()
        return
    endif

    ; Make sure you have a valid widget here.
    IF Widget_Info(self._id, /Valid_ID) NE 1 THEN RETURN
    
    IF N_ELEMENTS (erase_window) GT 0 THEN self._eraseWindow = Keyword_Set(erase_window)
    IF N_ELEMENTS (background)   GT 0 THEN self._background  = background

;---------------------------------------------------------------------
;Widget_Control Options //////////////////////////////////////////////
;---------------------------------------------------------------------

    IF N_ELEMENTS(xsize)    NE 0 THEN resizeFlag = 1
    IF N_ELEMENTS(ysize)    NE 0 THEN resizeFlag = 1    
    IF N_Elements(windowID) GT 0 THEN self._winID = windowID
    
    ;Widget_Control Options
    IF N_ELEMENTS(ignore_accelerators) GT 0 THEN WIDGET_CONTROL, self._id, IGNORE_ACCELERATORS = Keyword_Set(ignore_accelerators)
    IF N_ELEMENTS(set_draw_view)       GT 0 THEN WIDGET_CONTROL, self._id, SET_DRAW_VIEW       = set_draw_view
    IF N_ELEMENTS(input_focus)         GT 0 THEN WIDGET_CONTROL, self._id, INPUT_FOCUS         = Keyword_Set(input_focus)
    IF N_ELEMENTS(tooltip)             NE 0 THEN Widget_Control, self._ID, TOOLTIP             = tooltip

    ;Superclass
    if n_elements(extra) gt 0 then self -> MrWidgetAtom::SetProperty, _STRICT_EXTRA=extra

;---------------------------------------------------------------------
;Turn Events On or Off ///////////////////////////////////////////////
;---------------------------------------------------------------------
    IF N_ELEMENTS(button_events)   GT 0 THEN WIDGET_CONTROL, self._id, DRAW_BUTTON_EVENTS   = Keyword_Set(button_events)
    IF N_Elements(context_events)  NE 0 THEN WIDGET_CONTROL, self._id, CONTEXT_EVENTS       = Keyword_Set(context_events)
    IF N_ELEMENTS(expose_events)   GT 0 THEN WIDGET_CONTROL, self._id, DRAW_EXPOSE_EVENTS   = Keyword_Set(expose_events)
    IF N_ELEMENTS(keyboard_events) GT 0 THEN WIDGET_CONTROL, self._id, DRAW_KEYBOARD_EVENTS = Keyword_Set(keyboard_events)
    IF N_ELEMENTS(motion_events)   GT 0 THEN WIDGET_CONTROL, self._id, DRAW_MOTION_EVENTS   = Keyword_Set(motion_events)
    IF N_ELEMENTS(viewport_events) GT 0 THEN WIDGET_CONTROL, self._id, DRAW_VIEWPORT_EVENTS = Keyword_Set(viewport_events)
    IF N_ELEMENTS(wheel_events)    NE 0 THEN Widget_Control, self._ID, DRAW_WHEEL_EVENTS    = Keyword_Set(wheel_events)

;---------------------------------------------------------------------
;Callback Function/Procedures/Methods ////////////////////////////////
;---------------------------------------------------------------------
    ;Draw Event Handler
    if n_elements(draw_event_handler) gt 0 then begin
        if obj_valid(draw_event_handler) $
            then self._draw_event_handler = draw_event_handler $
            else self._draw_event_handler = obj_new()
    endif

    ;CONTEXT_HANDLER
    if n_elements(context_handler) gt 0 then begin
        case size(context_handler, /TNAME) of
            'STRUCT': begin
                test = {MrEventHandler}
                struct_assign, context_handler, test
                *self._context_handler = test
            endcase
            
            'STRING': *self._context_handler = context_handler            
            else: message, 'CONTEXT_HANDLER must be a string or structure.'
        endcase
    endif
    
    ;DRAG_NOTIFY
    if n_elements(drag_notify) gt 0 then begin
        case size(drag_notify, /TNAME) of
            'STRUCT': begin
                test = {MrEventHandler}
                struct_assign, drag_notify, test
                *self._drag_notify = test
                widget_control, self._id, SET_DRAG_NOTIFY='MrWidgetAtom_Drag_Notify'
            endcase
            
            'STRING': begin
                widget_control, self_id, SET_DRAG_NOTIFY=func_get_value
                *self._drag_notify = drag_notify
            endcase
            
            else: message, 'DRAG_NOTIFY must be a string or structure.'
        endcase
    endif

    ;DROP_HANDLER
    if n_elements(drop_handler) gt 0 then begin
        case size(drop_handler, /TNAME) of
            'STRUCT': begin
                test = {MrEventHandler}
                struct_assign, drop_handler, test
                *self._drop_handler = test
            endcase
            
            'STRING': *self._drop_handler = drop_handler            
            else: message, 'DROP_HANDLER must be a string or structure.'
        endcase
    endif
    
    ;EXPOSE_HANDLER
    if n_elements(expose_handler) gt 0 then begin
        case size(expose_handler, /TNAME) of
            'STRUCT': begin
                test = {MrEventHandler}
                struct_assign, expose_handler, test
                *self._expose_handler = test
            endcase
            
            'STRING': *self._expose_handler = expose_handler            
            else: message, 'EXPOSE_HANDLER must be a string or structure.'
        endcase
    endif
    
    ;KEYBOARD_HANDLER
    if n_elements(keyboard_handler) gt 0 then begin
        case size(keyboard_handler, /TNAME) of
            'STRUCT': begin
                test = {MrEventHandler}
                struct_assign, keyboard_handler, test
                *self._keyboard_handler = test
            endcase
            
            'STRING': *self._keyboard_handler = keyboard_handler            
            else: message, 'KEYBOARD_HANDLER must be a string or structure.'
        endcase
    endif
    
    ;MOUSE_DOWN_HANDLER
    if n_elements(mouse_down_hanler) gt 0 then begin
        case size(mouse_down_hanler, /TNAME) of
            'STRUCT': begin
                test = {MrEventHandler}
                struct_assign, mouse_down_hanler, test
                *self._mouse_down_hanler = test
            endcase
            
            'STRING': *self._mouse_down_hanler = mouse_down_hanler            
            else: message, 'MOUSE_DOWN_HANDLER must be a string or structure.'
        endcase
    endif
    
    ;MOUSE_UP_HANDLER
    if n_elements(mouse_up_hanler) gt 0 then begin
        case size(mouse_up_hanler, /TNAME) of
            'STRUCT': begin
                test = {MrEventHandler}
                struct_assign, mouse_up_hanler, test
                *self._mouse_up_hanler = test
            endcase
            
            'STRING': *self._mouse_up_hanler = mouse_up_hanler            
            else: message, 'MOUSE_UP_HANDLER must be a string or structure.'
        endcase
    endif
    
    ;MOUSE_MOTION_HANDLER
    if n_elements(mouse_motion_hanler) gt 0 then begin
        case size(mouse_motion_hanler, /TNAME) of
            'STRUCT': begin
                test = {MrEventHandler}
                struct_assign, mouse_motion_hanler, test
                *self._mouse_motion_hanler = test
            endcase
            
            'STRING': *self._mouse_motion_hanler = mouse_motion_hanler            
            else: message, 'MOUSE_MOTION_HANDLER must be a string or structure.'
        endcase
    endif
    
    ;MOUSE_WHEEL_HANDLER
    if n_elements(mouse_wheel_hanler) gt 0 then begin
        case size(mouse_wheel_hanler, /TNAME) of
            'STRUCT': begin
                test = {MrEventHandler}
                struct_assign, mouse_wheel_hanler, test
                *self._mouse_wheel_hanler = test
            endcase
            
            'STRING': *self._mouse_wheel_hanler = mouse_wheel_hanler            
            else: message, 'MOUSE_WHEEL_HANDLER must be a string or structure.'
        endcase
    endif
    
    ;VIEWPORT_HANDLER
    if n_elements(viewport_handler) gt 0 then begin
        case size(viewport_handler, /TNAME) of
            'STRUCT': begin
                test = {MrEventHandler}
                struct_assign, viewport_handler, test
                *self._viewport_handler = test
            endcase
            
            'STRING': *self._viewport_handler = viewport_handler            
            else: message, 'VIEWPORT_HANDLER must be a string or structure.'
        endcase
    endif
END


;+
;   This is the MrDrawWidget object class destructor method.
;-
pro MrDrawWidget::cleanup
    compile_opt strictarr
    
    ;Error handling
    catch, the_error
    if the_error ne 0 then begin
        catch, /cancel
        void = cgErrorMsg()
        return
    endif

    ;Free event handlers (but do not destroy event handling objects)
    ptr_free, self._keyboard_handler
    ptr_free, self._mouse_down_handler
    ptr_free, self._mouse_up_handler
    ptr_free, self._mouse_motion_handler
    ptr_free, self._mouse_wheel_handler
    ptr_free, self._drag_notify
    ptr_free, self._drop_handler
    ptr_free, self._expose_handler
    ptr_free, self._viewport_handler

    ;Destroy the pixmap object
    if obj_valid(self._oTLB) then self._oTLB -> Destroy
    if obj_valid(self._pixmap) then obj_destroy, self._pixmap
    
    ;Clean up the superclasses
    self -> MrWidgetAtom::Cleanup
    self -> MrIDL_Container::Cleanup
    self -> MrDraw_Event_Handler::Cleanup
end


;+
;   This is the DRAWWIDGET object class initialization method
;
; :Params:
;
;       PARENT:         An object reference to a WIDGETATOM-subclassed object.
;                           This is the same as using the PARENT keyword.
;
; :Keywords:
;
;       APP_SCROLL:      A memory-saving way of scrolling draw widgets. See WIDGET_DRAW documentation.
;
;       BUTTON_EVENTS:   Set this keyword to enable widget button events in the draw widget.
;
;       COLOR_OBJECT:    Use this keyword to load a COLORTOOL object for setting up colors
;                        for data display.
;
;       CONTEXT_EVENTS:  Set this keyword to turn context events on for this widget object..
;
;       COORD_OBJECT:    Use this keyword to load a CATCOORD object for setting up
;                        the data coordinate system for data display.
;
;       ERASE_WINDOW:    Set this keyword to cause the draw widget to execute an ERASE before drawing.
;
;       EXPOSE_EVENTS:   Set this keyword to enable widget expose events in the draw widget.
;
;       FRAME:           Create a frame this many pixels wide around the widget.
;
;       IGNORE_ACCELERATORS: Set this keyword to specify what WIDGET_BUTTON accelerators are to be
;                        ignored when this draw widget has keyboard focus. Setting IGNORE_ACCELERATORS
;                        allows a defined list of accelerators to be processed by the draw widget instead
;                        of by the conflicting accelerated button. Valid values are:
;
;                             A string or string array containing any value that is legal for the
;                             ACCELERATOR keyword for BUTTONWIDGET, or
;
;                             1 -- Indicating that all accelerators should be ignored.
;
;                        Ordinarily, accelerators are processed before keyboard events reach the
;                        widget that has the keyboard focus. Setting IGNORE_ACCELERATORS allows a
;                        defined list of accelerators to be processed by the draw widget instead of
;                        by associated buttons or menu items. Once the draw widget loses focus, all
;                        specified accelerators are automatically re-enabled.
;
;       INITIAL_COLOR:   The name of the initial color for the draw widget. Used when realized and
;                        if the draw widget is set up to erase before display (i.e., ERASE_WINDOW=1).
;
;       KEYBOARD_EVENTS: Set this keyword to enable keyboard events for this widget. Setting
;                        the value to 1 will enable "normal" keys. Setting the value to 2 will enable
;                        modifier keys. See the IDL documenation for WIDGET_DRAW for details.
;
;       MOTION_EVENTS:   Set this keyword to enable widget motion events in the draw widget.
;
;       NODRAW:          Set this keyword to prohibit re-drawing via the DRAW method.
;
;       PARENT:          An object reference to a WIDGETATOM-subclassed object.
;
;       REFRESHBUFFER:   An object reference to a PIXMAPWIDGET object that can serve to refresh the
;                        draw widget display. The draw widget takes no parental interest in this object
;                        and doesn't destroy it when the draw widget is destroyed. The refresh buffer is
;                        accessed via the REFRESH method. If no buffer is present, the REFRESH method
;                        simply calls the DRAW method for the object.
;
;       RETAIN:          Set this keyword to determine how backing store is handled. See IDL WIDGET_DRAW
;                        documentation for details. Set to 1 by default for Windows machines and to 2 otherwise.
;
;       SCR_XSIZE:       Set the screen X size of the base to this many pixels. (Use discouraged.)
;
;       SCR_YSIZE:       Set the screen Y size of the base to this many pixels. (Use discouraged.)
;
;       SCROLL:          Set this keyword to add scroll bars to the draw widget.
;
;       TOOLTIP:         Set this keyword to a string that will be displayed if the cursor hovers
;                        over the draw widget.
;
;       UNITS:           The units for measurments. The default is 0 for pixels. Other values are
;                        1 for inches, and 2 for centimeters.
;
;       VIEWPORT_EVENTS: Set this keyword to enable widget viewport scroll events in the draw widget.
;
;       WHEEL_EVENTS:    Set this keyword to enable wheel events in the draw widget.
;
;       X_SCROLL_SIZE:   The X size (pixels) of the scrollable window area.
;
;       XOFFSET:         The horizontal space (pixels) from upper left corner of the display.
;
;       XSIZE:           The X size of the widget. (300 pixels by default.)
;
;       Y_SCROLL_SIZE:   The Y size (pixels) of the scrollable window area
;
;       YOFFSET:         The vertical space (pixels) from upper left corner of the display.
;
;       YSIZE:           The Y size of the widget. (300 pixels by default.)

;       _EXTRA:          Any keyword appropriate for the superclass INIT methods.
;
;-
function MrDrawWidget::init, parent,   $
 APP_SCROLL=app_scroll, $
 BUTTON_EVENTS=button_events, $
 CLASSNAME=classname, $
 COLOR_MODEL=color_model, $
 COLORS=colors, $
 DRAG_NOTIFY=drag_notify, $
 DRAW_EVENT_HANDLER=draw_event_handler, $
 DROP_EVENTS=drop_events, $
 DROP_HANDLER=drop_handler, $
 EXPOSE_EVENTS=expose_events, $
 EXPOSE_HANDLER=expose_handler, $
 FUNCTION_CALLBACK=function_callback, $
 FRAME=frame, $
 GROUP_LEADER=group_leader, $
 IGNORE_ACCELERATORS=ignore_accelerators, $
 KEYBOARD_EVENTS=keyboard_events, $
 KEYBOARD_HANDLER=keyboard_handler, $
 MOTION_EVENTS=motion_events, $
 MOUSE_UP_HANDLER=mouse_up_handler, $
 MOUSE_DOWN_HANDLER=mouse_down_handler, $
 MOUSE_MOTION_HANDLER=mouse_motion_handler, $
 MOUSE_WHEEL_HANDLER=mouse_wheel_handler, $
 NOTIFY_REALIZE=notify_realize, $
 RENDERER=renderer, $
 RESOURCE_NAME=resource_name, $
 RETAIN=retain, $
 SCR_XSIZE=scr_xsize, $
 SCR_YSIZE=scr_ysize, $
 SCROLL=scroll, $
 TOOLTIP=tooltip, $
 UNITS=units, $
 VIEWPORT_EVENTS=viewport_events, $
 VIEWPORT_HANDLER=viewport_handler, $
 WHEEL_EVENTS=wheel_events, $
 X_SCROLL_SIZE=x_scroll_size, $
 XOFFSET=xoffset, $
 XSIZE=xsize, $
 Y_SCROLL_SIZE=y_scroll_size, $
 YOFFSET=yoffset, $
 YSIZE=ysize, $
_REF_EXTRA=extra
   compile_opt strictarr
    
    ;Error handling
    catch, the_error
    if the_error ne 0 then begin
        catch, /cancel
        void = cgErrorMsg()
        return, 0
    endif

;---------------------------------------------------------------------
;Defaults ////////////////////////////////////////////////////////////
;---------------------------------------------------------------------
;    self._nodraw = keyword_set(nodraw)
    if n_elements(xsize) eq 0 then xsize = 300
    if n_elements(ysize) eq 0 then ysize = 300
    if n_elements(background) eq 0 then self._background = 'black' else self._background = background
    if n_elements(retain) eq 0 then retain=(!version.os_family eq 'windows') ? 1 : 2

    ;Default handlers
    if n_elements(drag_notify)          eq 0 then drag_notify          = {object: self, method: 'Drag_Notify'}
    if n_elements(drop_handler)         eq 0 then drop_handler         = {object: self, method: 'Expose_Events'}
    if n_elements(expose_handler)       eq 0 then expose_handler       = {object: self, method: 'Expose_Events'}
    if n_elements(keyboard_handler)     eq 0 then keyboard_handler     = {object: self, method: 'KeyHandler'}
    if n_elements(mouse_up_handler)     eq 0 then mouse_up_handler     = {object: self, method: 'MouseUp'}
    if n_elements(mouse_down_handler)   eq 0 then mouse_down_handler   = {object: self, method: 'MouseDown'}
    if n_elements(mouse_motion_handler) eq 0 then mouse_motion_handler = {object: self, method: 'MouseMotion'}
    if n_elements(mouse_wheel_handler)  eq 0 then mouse_wheel_handler  = {object: self, method: 'MouseWheel'}
    if n_elements(viewport_handler)     eq 0 then viewport_handler     = {object: self, method: 'Viewport_Events'}
    
    ;Allocate heap
    self._drag_notify          = ptr_new(/ALLOCATE_HEAP)
    self._drop_handler         = ptr_new(/ALLOCATE_HEAP)
    self._expose_handler       = ptr_new(/ALLOCATE_HEAP)
    self._keyboard_handler     = ptr_new(/ALLOCATE_HEAP)
    self._mouse_down_handler   = ptr_new(/ALLOCATE_HEAP)
    self._mouse_up_handler     = ptr_new(/ALLOCATE_HEAP)
    self._mouse_motion_handler = ptr_new(/ALLOCATE_HEAP)
    self._mouse_wheel_handler  = ptr_new(/ALLOCATE_HEAP)
    self._viewport_handler     = ptr_new(/ALLOCATE_HEAP)
    
    ;Objects
    self._draw_event_handler = obj_new()

;---------------------------------------------------------------------
;Parent //////////////////////////////////////////////////////////////
;---------------------------------------------------------------------

    ;Create a MrTopLevelBase object to use as the parent
    if n_elements(parent) eq 0 then begin
        self -> BuildWindow
        self._oTLB -> GetProperty, ID=parentID

    ;Use an existing MrTopLevelBase object as the parent.
    endif else if size(parent, /TNAME) eq 'OBJREF' then begin
        tf_MrTLB = cgObj_IsA(parent, 'MrTopLevelBase')
        if tf_MrTLB eq 0 then message, 'Only "MrTopLevelBase" classes may be given as a parent.'
        self._oTLB = parent
        self._oTLB -> GetProperty, ID=parentID
    
    ;Use a normal widget base as the parent.
    endif else begin
        self._oTLB = parent
        parentID = parent
    endelse
    
;---------------------------------------------------------------------
;Create the Draw Widget //////////////////////////////////////////////
;---------------------------------------------------------------------
    self._id = widget_draw( parentID,   $
                            APP_SCROLL          = app_scroll, $
                            CLASSNAME           = classname, $
                            COLOR_MODEL         = color_model, $
                            COLORS              = colors, $
                            FRAME               = frame, $
                            GROUP_LEADER        = group_leader, $
                            IGNORE_ACCELERATORS = ignore_accelerators, $
                            RENDERER            = renderer, $
                            RESOURCE_NAME       = resource_name, $
                            RETAIN              = retain, $
                            SCR_XSIZE           = scr_xsize, $
                            SCR_YSIZE           = scr_ysize, $
                            SCROLL              = scroll, $
                            TOOLTIP             = tooltip, $
                            UNITS               = units, $
                            X_SCROLL_SIZE       = x_scroll_size, $
                            XOFFSET             = xoffset, $
                            XSIZE               = xsize, $
                            Y_SCROLL_SIZE       = y_scroll_size, $
                            YOFFSET             = yoffset, $
                            YSIZE               = ysize $
                          )

;---------------------------------------------------------------------
;More Superclasses ///////////////////////////////////////////////////
;---------------------------------------------------------------------

    success = self -> MrWidgetAtom::INIT(NOTIFY_REALIZE=notify_realize, $
                                        _STRICT_EXTRA=extra)
    if success eq 0 then message, 'MrWidgetAtom could not be initialized.'
    
    ;Set the callback func/pro -- must be done after MrWidgetAtom is initialized.
    if keyword_set(function_callback) $
        then self -> _Set_Event_Func, 'MrDrawWidget_Event_Func' $
        else self -> _Set_Event_Pro,  'MrDrawWidget_Event_Pro'
    
    self -> SetProperty, DRAG_NOTIFY=drag_notify, $
                         DRAW_EVENT_HANDLER=draw_event_handler, $
                         DROP_HANDLER=drop_handler, $
                         EXPOSE_HANDLER=expose_handler, $
                         KEYBOARD_HANDLER=keyboard_handler, $
                         MOUSE_DOWN_HANDLER=mouse_down_handler, $
                         MOUSE_UP_HANDLER=mouse_up_handler, $
                         MOUSE_MOTION_HANDLER=mouse_motion_handler, $
                         MOUSE_WHEEL_HANDLER=mouse_wheel_handler, $
                         VIEWPORT_HANDLER=viewport_handler

;---------------------------------------------------------------------
;Return Step /////////////////////////////////////////////////////////
;---------------------------------------------------------------------
        
    ;Set the user value of the widget as the TLB object reference.
    widget_control, self._id, SET_UVALUE=self

    ;If we created a new tlb, realize it now and register it with XManager.
    if n_elements(parent) eq 0 and obj_valid(self._oTLB) then begin
        self._oTLB -> XManager
    endif

    ; need a window erase?
;    self._erase = keyword_set(erase_window)

    return, 1
end



;+
;   The class definition statement.
;
; :Params:
;       CLASS:          out, optional, type=structure
;                       The class definition structure.
;-
pro MrDrawWidget__define, class

   class = { MrDrawWidget, $
             inherits MrWidgetAtom, $
             inherits MrIDL_Container, $
             inherits MrDraw_Event_Handler, $
             _oTLB: obj_new(), $        ;A top-level base widget object, if required.
             _winID: 0, $               ;The window ID of the draw window
             
             ;Draw Event Handlers
             _draw_event_handler:   obj_new(), $
             _keyboard_handler:     ptr_new(), $
             _mouse_down_handler:   ptr_new(), $
             _mouse_up_handler:     ptr_new(), $
             _mouse_motion_handler: ptr_new(), $
             _mouse_wheel_handler:  ptr_new(), $
             
             ;Method Event Handlers
             _drag_notify:      ptr_new(), $
             _drop_handler:     ptr_new(), $
             _expose_handler:   ptr_new(), $
             _viewport_handler: ptr_new(), $
            
             _refresh: 0B, $            ; flag that, if set, inhibits draw method calls.
             _erase: 0B, $              ; a flag that indicates the window should be erased before drawing.
             _background: '', $         ; the name of the initial window color.
             _pixmap: obj_new() $       ; the identifier of a pixmapwidget that can carry out window refresh.
           }
end